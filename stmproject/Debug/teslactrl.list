
teslactrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800578c  0800578c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005794  08005794  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800579c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a20c  2000007c  08005818  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a288  08005818  0002a288  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d313  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa2  00000000  00000000  0002d3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002fd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269c6  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd5f  00000000  00000000  000570b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef172  00000000  00000000  00063e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca4  00000000  00000000  00152fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004fb0 	.word	0x08004fb0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08004fb0 	.word	0x08004fb0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_SPI_TxCpltCallback+0x34>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <HAL_SPI_TxCpltCallback+0x34>)
 80005e8:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_SPI_TxCpltCallback+0x34>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d108      	bne.n	8000604 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi2);
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <HAL_SPI_TxCpltCallback+0x38>)
 80005f4:	f003 fa1e 	bl	8003a34 <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <HAL_SPI_TxCpltCallback+0x34>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_SPI_TxCpltCallback+0x3c>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]
	}
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000000 	.word	0x20000000
 8000610:	2000a0a8 	.word	0x2000a0a8
 8000614:	20000098 	.word	0x20000098

08000618 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000620:	bf00      	nop
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 ff20 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f839 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f96f 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 8000642:	f000 f94f 	bl	80008e4 <MX_DMA_Init>
  MX_UART7_Init();
 8000646:	f000 f8ed 	bl	8000824 <MX_UART7_Init>
  MX_UART8_Init();
 800064a:	f000 f91b 	bl	8000884 <MX_UART8_Init>
  MX_SPI2_Init();
 800064e:	f000 f8ab 	bl	80007a8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DISPLAY_PWM_GPIO_Port, DISPLAY_PWM_Pin, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <main+0x70>)
 800065a:	f001 fe35 	bl	80022c8 <HAL_GPIO_WritePin>
  /*ili.rot = ROT0;
  ili.Height = 128;
  ili.Width = 160;
  Ili9163_Init(ili);
  uint8_t id = Ili9163_Read_ID1();*/
  ILI9163_init(0);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 fcc6 	bl	8000ff0 <ILI9163_init>
  ILI9163_newFrame();
 8000664:	f000 fdaa 	bl	80011bc <ILI9163_newFrame>
  ILI9163_fillDisplay(GREEN);
 8000668:	200c      	movs	r0, #12
 800066a:	f000 fe43 	bl	80012f4 <ILI9163_fillDisplay>
  uint16_t test = 111;
 800066e:	236f      	movs	r3, #111	; 0x6f
 8000670:	80fb      	strh	r3, [r7, #6]
  ILI9163_drawStringF(10, 10, Font_7x10, BLACK, "%u", test);
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <main+0x74>)
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <main+0x78>)
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2300      	movs	r3, #0
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	ca0c      	ldmia	r2, {r2, r3}
 8000682:	210a      	movs	r1, #10
 8000684:	200a      	movs	r0, #10
 8000686:	f000 fed2 	bl	800142e <ILI9163_drawStringF>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ILI9163_render();
 800068a:	f000 fdb3 	bl	80011f4 <ILI9163_render>
	  //id = Ili9163_Read_ID1();
	//Ili9163_Draw_Pixel(ili,10,10,BLACK);
	HAL_GPIO_TogglePin(LIFE_LED_GPIO_Port,LIFE_LED_Pin);
 800068e:	2104      	movs	r1, #4
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0x7c>)
 8000692:	f001 fe32 	bl	80022fa <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069a:	f000 ff4b 	bl	8001534 <HAL_Delay>
	  ILI9163_render();
 800069e:	e7f4      	b.n	800068a <main+0x5a>
 80006a0:	40021000 	.word	0x40021000
 80006a4:	20000008 	.word	0x20000008
 80006a8:	08004fc8 	.word	0x08004fc8
 80006ac:	40020400 	.word	0x40020400

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b8      	sub	sp, #224	; 0xe0
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 f826 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2290      	movs	r2, #144	; 0x90
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 f817 	bl	8004710 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b2f      	ldr	r3, [pc, #188]	; (80007a0 <SystemClock_Config+0xf0>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a2e      	ldr	r2, [pc, #184]	; (80007a0 <SystemClock_Config+0xf0>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <SystemClock_Config+0xf0>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemClock_Config+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <SystemClock_Config+0xf4>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xf4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2310      	movs	r3, #16
 8000724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fdfc 	bl	8002330 <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800073e:	f000 f9d3 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f890 	bl	800288c <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000772:	f000 f9b9 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8;
 8000776:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800077a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8000780:	2300      	movs	r3, #0
 8000782:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fa55 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000794:	f000 f9a8 	bl	8000ae8 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	37e0      	adds	r7, #224	; 0xe0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_SPI2_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <MX_SPI2_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_SPI2_Init+0x74>)
 80007b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_SPI2_Init+0x74>)
 80007bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007c0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI2_Init+0x74>)
 80007c4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI2_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI2_Init+0x74>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI2_Init+0x74>)
 80007e0:	2208      	movs	r2, #8
 80007e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_SPI2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI2_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI2_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI2_Init+0x74>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI2_Init+0x74>)
 8000804:	2208      	movs	r2, #8
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI2_Init+0x74>)
 800080a:	f002 fe05 	bl	8003418 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000814:	f000 f968 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000a0a8 	.word	0x2000a0a8
 8000820:	40003800 	.word	0x40003800

08000824 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_UART7_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_UART7_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 19200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_UART7_Init+0x58>)
 8000830:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000834:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_UART7_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_UART7_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_UART7_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_UART7_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_UART7_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_UART7_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_UART7_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_UART7_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_UART7_Init+0x58>)
 8000868:	f003 fb10 	bl	8003e8c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f939 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000a10c 	.word	0x2000a10c
 8000880:	40007800 	.word	0x40007800

08000884 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_UART8_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_UART8_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 19200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_UART8_Init+0x58>)
 8000890:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000894:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_UART8_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_UART8_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_UART8_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_UART8_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_UART8_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_UART8_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_UART8_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_UART8_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_UART8_Init+0x58>)
 80008c8:	f003 fae0 	bl	8003e8c <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f909 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000a190 	.word	0x2000a190
 80008e0:	40007c00 	.word	0x40007c00

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_DMA_Init+0x38>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_DMA_Init+0x38>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_DMA_Init+0x38>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200f      	movs	r0, #15
 8000908:	f000 ff13 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800090c:	200f      	movs	r0, #15
 800090e:	f000 ff2c 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a64      	ldr	r2, [pc, #400]	; (8000acc <MX_GPIO_Init+0x1ac>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b62      	ldr	r3, [pc, #392]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
 800094c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a5e      	ldr	r2, [pc, #376]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000954:	f043 0320 	orr.w	r3, r3, #32
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b5c      	ldr	r3, [pc, #368]	; (8000acc <MX_GPIO_Init+0x1ac>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0320 	and.w	r3, r3, #32
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	4b59      	ldr	r3, [pc, #356]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a58      	ldr	r2, [pc, #352]	; (8000acc <MX_GPIO_Init+0x1ac>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b56      	ldr	r3, [pc, #344]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x1ac>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b4d      	ldr	r3, [pc, #308]	; (8000acc <MX_GPIO_Init+0x1ac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a4c      	ldr	r2, [pc, #304]	; (8000acc <MX_GPIO_Init+0x1ac>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <MX_GPIO_Init+0x1ac>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	4b47      	ldr	r3, [pc, #284]	; (8000acc <MX_GPIO_Init+0x1ac>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a46      	ldr	r2, [pc, #280]	; (8000acc <MX_GPIO_Init+0x1ac>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b44      	ldr	r3, [pc, #272]	; (8000acc <MX_GPIO_Init+0x1ac>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIFE_LED_Pin|DISPLAY_RST_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f640 0104 	movw	r1, #2052	; 0x804
 80009cc:	4840      	ldr	r0, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 80009ce:	f001 fc7b 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_PWM_GPIO_Port, DISPLAY_PWM_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d8:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x1b4>)
 80009da:	f001 fc75 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART7_DE_GPIO_Port, UART7_DE_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	483d      	ldr	r0, [pc, #244]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 80009e4:	f001 fc70 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_D_GPIO_Port, DISPLAY_D_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ee:	483b      	ldr	r0, [pc, #236]	; (8000adc <MX_GPIO_Init+0x1bc>)
 80009f0:	f001 fc6a 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2108      	movs	r1, #8
 80009f8:	4839      	ldr	r0, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 80009fa:	f001 fc65 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LIFE_LED_Pin DISPLAY_RST_Pin */
  GPIO_InitStruct.Pin = LIFE_LED_Pin|DISPLAY_RST_Pin;
 80009fe:	f640 0304 	movw	r3, #2052	; 0x804
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482e      	ldr	r0, [pc, #184]	; (8000ad0 <MX_GPIO_Init+0x1b0>)
 8000a18:	f001 faaa 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_5_Pin BTN_2_Pin BTN_3_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_5_Pin|BTN_2_Pin|BTN_3_Pin|BTN_1_Pin;
 8000a1c:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	482c      	ldr	r0, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 8000a32:	f001 fa9d 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_4_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000a4a:	f001 fa91 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_PWM_Pin */
  GPIO_InitStruct.Pin = DISPLAY_PWM_Pin;
 8000a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DISPLAY_PWM_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <MX_GPIO_Init+0x1b4>)
 8000a68:	f001 fa82 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART7_DE_Pin */
  GPIO_InitStruct.Pin = UART7_DE_Pin;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART7_DE_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000a84:	f001 fa74 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_D_Pin */
  GPIO_InitStruct.Pin = DISPLAY_D_Pin;
 8000a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DISPLAY_D_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x1bc>)
 8000aa2:	f001 fa65 	bl	8001f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPLAY_CS_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DISPLAY_CS_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 8000abe:	f001 fa57 	bl	8001f70 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40021800 	.word	0x40021800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	40021400 	.word	0x40021400

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_SPI_MspInit+0xf0>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d161      	bne.n	8000c22 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <HAL_SPI_MspInit+0xf4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = DISPLAY_SCK_Pin|DISPLAY_MOSI_Pin;
 8000b8e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4822      	ldr	r0, [pc, #136]	; (8000c34 <HAL_SPI_MspInit+0xf8>)
 8000bac:	f001 f9e0 	bl	8001f70 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_SPI_MspInit+0x100>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bbe:	2240      	movs	r2, #64	; 0x40
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000c08:	f000 fdca 	bl	80017a0 <HAL_DMA_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_SPI_MspInit+0xda>
    {
      Error_Handler();
 8000c12:	f7ff ff69 	bl	8000ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000c1a:	655a      	str	r2, [r3, #84]	; 0x54
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_SPI_MspInit+0xfc>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40003800 	.word	0x40003800
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020400 	.word	0x40020400
 8000c38:	2000a214 	.word	0x2000a214
 8000c3c:	40026070 	.word	0x40026070

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <HAL_UART_MspInit+0xd8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d129      	bne.n	8000cb6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c92:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <HAL_UART_MspInit+0xe0>)
 8000cb0:	f001 f95e 	bl	8001f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8000cb4:	e02c      	b.n	8000d10 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==UART8)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_UART_MspInit+0xe4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d127      	bne.n	8000d10 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_UART_MspInit+0xdc>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8000d00:	2308      	movs	r3, #8
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_UART_MspInit+0xe0>)
 8000d0c:	f001 f930 	bl	8001f70 <HAL_GPIO_Init>
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40007800 	.word	0x40007800
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40007c00 	.word	0x40007c00

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 fbbe 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <DMA1_Stream4_IRQHandler+0x10>)
 8000d82:	f000 fe8b 	bl	8001a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */
  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000a214 	.word	0x2000a214

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f003 fc7c 	bl	80046bc <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20080000 	.word	0x20080000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	2000009c 	.word	0x2000009c
 8000df8:	2000a288 	.word	0x2000a288

08000dfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480d      	ldr	r0, [pc, #52]	; (8000e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e26:	490e      	ldr	r1, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e3c:	4c0b      	ldr	r4, [pc, #44]	; (8000e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4a:	f7ff ffd7 	bl	8000dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f003 fc3b 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fbed 	bl	8000630 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e64:	0800579c 	.word	0x0800579c
  ldr r2, =_sbss
 8000e68:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e6c:	2000a288 	.word	0x2000a288

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef hspi2;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <ILI9163_writeCommand+0x40>)
 8000e84:	f001 fa20 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_D_GPIO_Port, DISPLAY_D_Pin, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8e:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <ILI9163_writeCommand+0x44>)
 8000e90:	f001 fa1a 	bl	80022c8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &address, 1, 0);
 8000e94:	1df9      	adds	r1, r7, #7
 8000e96:	2300      	movs	r3, #0
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <ILI9163_writeCommand+0x48>)
 8000e9c:	f002 fb67 	bl	800356e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ILI9163_writeCommand+0x40>)
 8000ea6:	f001 fa0f 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	2000a0a8 	.word	0x2000a0a8

08000ec0 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2108      	movs	r1, #8
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <ILI9163_writeData+0x40>)
 8000ed0:	f001 f9fa 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_D_GPIO_Port, DISPLAY_D_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	480a      	ldr	r0, [pc, #40]	; (8000f04 <ILI9163_writeData+0x44>)
 8000edc:	f001 f9f4 	bl	80022c8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &data, 1, 0);
 8000ee0:	1df9      	adds	r1, r7, #7
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4808      	ldr	r0, [pc, #32]	; (8000f08 <ILI9163_writeData+0x48>)
 8000ee8:	f002 fb41 	bl	800356e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2108      	movs	r1, #8
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <ILI9163_writeData+0x40>)
 8000ef2:	f001 f9e9 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40020000 	.word	0x40020000
 8000f08:	2000a0a8 	.word	0x2000a0a8

08000f0c <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <ILI9163_writeData16+0x50>)
 8000f1c:	f001 f9d4 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_D_GPIO_Port, DISPLAY_D_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <ILI9163_writeData16+0x54>)
 8000f28:	f001 f9ce 	bl	80022c8 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000f2c:	88fb      	ldrh	r3, [r7, #6]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	733b      	strb	r3, [r7, #12]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&hspi2, data, 2, 0);
 8000f3c:	f107 010c 	add.w	r1, r7, #12
 8000f40:	2300      	movs	r3, #0
 8000f42:	2202      	movs	r2, #2
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <ILI9163_writeData16+0x58>)
 8000f46:	f002 fb12 	bl	800356e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <ILI9163_writeData16+0x50>)
 8000f50:	f001 f9ba 	bl	80022c8 <HAL_GPIO_WritePin>
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40020000 	.word	0x40020000
 8000f64:	2000a0a8 	.word	0x2000a0a8

08000f68 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4608      	mov	r0, r1
 8000f72:	4611      	mov	r1, r2
 8000f74:	461a      	mov	r2, r3
 8000f76:	4623      	mov	r3, r4
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
 8000f82:	4613      	mov	r3, r2
 8000f84:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000f86:	202a      	movs	r0, #42	; 0x2a
 8000f88:	f7ff ff74 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffbc 	bl	8000f0c <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffb8 	bl	8000f0c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000f9c:	202b      	movs	r0, #43	; 0x2b
 8000f9e:	f7ff ff69 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ffb1 	bl	8000f0c <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 8000faa:	883b      	ldrh	r3, [r7, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffad 	bl	8000f0c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8000fb2:	202c      	movs	r0, #44	; 0x2c
 8000fb4:	f7ff ff5e 	bl	8000e74 <ILI9163_writeCommand>
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, DISPLAY_RST_Pin, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <ILI9163_reset+0x2c>)
 8000fcc:	f001 f97c 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000fd0:	2032      	movs	r0, #50	; 0x32
 8000fd2:	f000 faaf 	bl	8001534 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, DISPLAY_RST_Pin, 1);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <ILI9163_reset+0x2c>)
 8000fde:	f001 f973 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f000 faa6 	bl	8001534 <HAL_Delay>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40020400 	.word	0x40020400

08000ff0 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	486d      	ldr	r0, [pc, #436]	; (80011b4 <ILI9163_init+0x1c4>)
 8000ffe:	f001 f963 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, DISPLAY_RST_Pin, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	486b      	ldr	r0, [pc, #428]	; (80011b8 <ILI9163_init+0x1c8>)
 800100a:	f001 f95d 	bl	80022c8 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 800100e:	f7ff ffd7 	bl	8000fc0 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8001012:	2011      	movs	r0, #17
 8001014:	f7ff ff2e 	bl	8000e74 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8001018:	2005      	movs	r0, #5
 800101a:	f000 fa8b 	bl	8001534 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800101e:	203a      	movs	r0, #58	; 0x3a
 8001020:	f7ff ff28 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8001024:	2005      	movs	r0, #5
 8001026:	f7ff ff4b 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 800102a:	2026      	movs	r0, #38	; 0x26
 800102c:	f7ff ff22 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 8001030:	2004      	movs	r0, #4
 8001032:	f7ff ff45 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8001036:	20f2      	movs	r0, #242	; 0xf2
 8001038:	f7ff ff1c 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff ff3f 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8001042:	20e0      	movs	r0, #224	; 0xe0
 8001044:	f7ff ff16 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8001048:	203f      	movs	r0, #63	; 0x3f
 800104a:	f7ff ff39 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800104e:	2025      	movs	r0, #37	; 0x25
 8001050:	f7ff ff36 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8001054:	201c      	movs	r0, #28
 8001056:	f7ff ff33 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 800105a:	201e      	movs	r0, #30
 800105c:	f7ff ff30 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8001060:	2020      	movs	r0, #32
 8001062:	f7ff ff2d 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8001066:	2012      	movs	r0, #18
 8001068:	f7ff ff2a 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800106c:	202a      	movs	r0, #42	; 0x2a
 800106e:	f7ff ff27 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8001072:	2090      	movs	r0, #144	; 0x90
 8001074:	f7ff ff24 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8001078:	2024      	movs	r0, #36	; 0x24
 800107a:	f7ff ff21 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800107e:	2011      	movs	r0, #17
 8001080:	f7ff ff1e 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff ff1b 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ff18 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ff15 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ff12 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ff0f 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80010a2:	20e1      	movs	r0, #225	; 0xe1
 80010a4:	f7ff fee6 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f7ff ff09 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80010ae:	2020      	movs	r0, #32
 80010b0:	f7ff ff06 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80010b4:	2020      	movs	r0, #32
 80010b6:	f7ff ff03 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80010ba:	2020      	movs	r0, #32
 80010bc:	f7ff ff00 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f7ff fefd 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fefa 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80010cc:	2015      	movs	r0, #21
 80010ce:	f7ff fef7 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80010d2:	20a7      	movs	r0, #167	; 0xa7
 80010d4:	f7ff fef4 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80010d8:	203d      	movs	r0, #61	; 0x3d
 80010da:	f7ff fef1 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80010de:	2018      	movs	r0, #24
 80010e0:	f7ff feee 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80010e4:	2025      	movs	r0, #37	; 0x25
 80010e6:	f7ff feeb 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80010ea:	202a      	movs	r0, #42	; 0x2a
 80010ec:	f7ff fee8 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80010f0:	202b      	movs	r0, #43	; 0x2b
 80010f2:	f7ff fee5 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80010f6:	202b      	movs	r0, #43	; 0x2b
 80010f8:	f7ff fee2 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80010fc:	203a      	movs	r0, #58	; 0x3a
 80010fe:	f7ff fedf 	bl	8000ec0 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8001102:	20b1      	movs	r0, #177	; 0xb1
 8001104:	f7ff feb6 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8001108:	2008      	movs	r0, #8
 800110a:	f7ff fed9 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800110e:	2002      	movs	r0, #2
 8001110:	f7ff fed6 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8001114:	20b2      	movs	r0, #178	; 0xb2
 8001116:	f7ff fead 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800111a:	2008      	movs	r0, #8
 800111c:	f7ff fed0 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001120:	2002      	movs	r0, #2
 8001122:	f7ff fecd 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8001126:	20b3      	movs	r0, #179	; 0xb3
 8001128:	f7ff fea4 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800112c:	2008      	movs	r0, #8
 800112e:	f7ff fec7 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001132:	2002      	movs	r0, #2
 8001134:	f7ff fec4 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8001138:	20b4      	movs	r0, #180	; 0xb4
 800113a:	f7ff fe9b 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff febe 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x48); // VML = 91: VCOML voltage = -0.225
	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8001144:	202a      	movs	r0, #42	; 0x2a
 8001146:	f7ff fe95 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff feb8 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 8001150:	2000      	movs	r0, #0
 8001152:	f7ff feb5 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff feb2 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800115c:	207f      	movs	r0, #127	; 0x7f
 800115e:	f7ff feaf 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8001162:	202b      	movs	r0, #43	; 0x2b
 8001164:	f7ff fe86 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fea9 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fea6 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fea3 	bl	8000ec0 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 800117a:	209f      	movs	r0, #159	; 0x9f
 800117c:	f7ff fea0 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 8001180:	2036      	movs	r0, #54	; 0x36
 8001182:	f7ff fe77 	bl	8000e74 <ILI9163_writeCommand>
	if(rotation)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <ILI9163_init+0x1a4>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800118c:	20a8      	movs	r0, #168	; 0xa8
 800118e:	f7ff fe97 	bl	8000ec0 <ILI9163_writeData>
 8001192:	e002      	b.n	800119a <ILI9163_init+0x1aa>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8001194:	2068      	movs	r0, #104	; 0x68
 8001196:	f7ff fe93 	bl	8000ec0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 800119a:	2013      	movs	r0, #19
 800119c:	f7ff fe6a 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80011a0:	2029      	movs	r0, #41	; 0x29
 80011a2:	f7ff fe67 	bl	8000e74 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80011a6:	202c      	movs	r0, #44	; 0x2c
 80011a8:	f7ff fe64 	bl	8000e74 <ILI9163_writeCommand>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40020400 	.word	0x40020400

080011bc <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	e008      	b.n	80011da <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <ILI9163_newFrame+0x34>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3301      	adds	r3, #1
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80011e0:	d3f2      	bcc.n	80011c8 <ILI9163_newFrame+0xc>
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200000a0 	.word	0x200000a0

080011f4 <ILI9163_render>:

void ILI9163_render()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	22a0      	movs	r2, #160	; 0xa0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff feb2 	bl	8000f68 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2108      	movs	r1, #8
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <ILI9163_render+0x48>)
 800120a:	f001 f85d 	bl	80022c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPLAY_D_GPIO_Port, DISPLAY_D_Pin, 1);
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <ILI9163_render+0x4c>)
 8001216:	f001 f857 	bl	80022c8 <HAL_GPIO_WritePin>
	SPI_DMA_FL=0;
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <ILI9163_render+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frameBuffer, BUFSIZE*2);
 8001220:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001224:	4908      	ldr	r1, [pc, #32]	; (8001248 <ILI9163_render+0x54>)
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <ILI9163_render+0x58>)
 8001228:	f002 fb10 	bl	800384c <HAL_SPI_Transmit_DMA>


	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800122c:	bf00      	nop
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <ILI9163_render+0x50>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0fb      	beq.n	800122e <ILI9163_render+0x3a>
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40020000 	.word	0x40020000
 8001244:	20000098 	.word	0x20000098
 8001248:	200000a0 	.word	0x200000a0
 800124c:	2000a0a8 	.word	0x2000a0a8

08001250 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	460b      	mov	r3, r1
 800125c:	71bb      	strb	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b9f      	cmp	r3, #159	; 0x9f
 8001266:	d80f      	bhi.n	8001288 <ILI9163_drawPixel+0x38>
 8001268:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0b      	blt.n	8001288 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 8001270:	79f9      	ldrb	r1, [r7, #7]
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	015b      	lsls	r3, r3, #5
 800127c:	440b      	add	r3, r1
 800127e:	4905      	ldr	r1, [pc, #20]	; (8001294 <ILI9163_drawPixel+0x44>)
 8001280:	88ba      	ldrh	r2, [r7, #4]
 8001282:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001286:	e000      	b.n	800128a <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001288:	bf00      	nop

	/*Without DMA:*/
	/*if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
	ILI9163_setAddress(x, y, x + 1, y);
	ILI9163_writeData16(color);*/
}
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	200000a0 	.word	0x200000a0

08001298 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4623      	mov	r3, r4
 80012a8:	71fb      	strb	r3, [r7, #7]
 80012aa:	4603      	mov	r3, r0
 80012ac:	71bb      	strb	r3, [r7, #6]
 80012ae:	460b      	mov	r3, r1
 80012b0:	717b      	strb	r3, [r7, #5]
 80012b2:	4613      	mov	r3, r2
 80012b4:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e012      	b.n	80012e2 <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	73bb      	strb	r3, [r7, #14]
 80012c0:	e008      	b.n	80012d4 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 80012c2:	8c3a      	ldrh	r2, [r7, #32]
 80012c4:	7bb9      	ldrb	r1, [r7, #14]
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffc1 	bl	8001250 <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73bb      	strb	r3, [r7, #14]
 80012d4:	7bba      	ldrb	r2, [r7, #14]
 80012d6:	793b      	ldrb	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d3f2      	bcc.n	80012c2 <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d3e8      	bcc.n	80012bc <ILI9163_fillRect+0x24>
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}

080012f4 <ILI9163_fillDisplay>:
		ILI9163_drawPixel(centerX + y, centerY - x, color);
		ILI9163_drawPixel(centerX - y, centerY - x, color);
	}
}

void ILI9163_fillDisplay(uint16_t color) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	22a0      	movs	r2, #160	; 0xa0
 8001306:	2100      	movs	r1, #0
 8001308:	2000      	movs	r0, #0
 800130a:	f7ff ffc5 	bl	8001298 <ILI9163_fillRect>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <ILI9163_drawChar>:

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 8001316:	b082      	sub	sp, #8
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	460b      	mov	r3, r1
 8001326:	71bb      	strb	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 800132c:	2300      	movs	r3, #0
 800132e:	81fb      	strh	r3, [r7, #14]
 8001330:	e02f      	b.n	8001392 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8001332:	6a3a      	ldr	r2, [r7, #32]
 8001334:	797b      	ldrb	r3, [r7, #5]
 8001336:	3b20      	subs	r3, #32
 8001338:	7f79      	ldrb	r1, [r7, #29]
 800133a:	fb01 f103 	mul.w	r1, r1, r3
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	440b      	add	r3, r1
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 800134a:	2300      	movs	r3, #0
 800134c:	81bb      	strh	r3, [r7, #12]
 800134e:	e018      	b.n	8001382 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8001350:	897a      	ldrh	r2, [r7, #10]
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8001360:	89bb      	ldrh	r3, [r7, #12]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4413      	add	r3, r2
 8001368:	b2d8      	uxtb	r0, r3
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	4413      	add	r3, r2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff ff6a 	bl	8001250 <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	7f3b      	ldrb	r3, [r7, #28]
 8001384:	b29b      	uxth	r3, r3
 8001386:	89ba      	ldrh	r2, [r7, #12]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3e1      	bcc.n	8001350 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 800138c:	89fb      	ldrh	r3, [r7, #14]
 800138e:	3301      	adds	r3, #1
 8001390:	81fb      	strh	r3, [r7, #14]
 8001392:	7f7b      	ldrb	r3, [r7, #29]
 8001394:	b29b      	uxth	r3, r3
 8001396:	89fa      	ldrh	r2, [r7, #14]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3ca      	bcc.n	8001332 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013a8:	b002      	add	sp, #8
 80013aa:	4770      	bx	lr

080013ac <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	1d39      	adds	r1, r7, #4
 80013b8:	e881 000c 	stmia.w	r1, {r2, r3}
 80013bc:	4623      	mov	r3, r4
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	4603      	mov	r3, r0
 80013c2:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 80013c4:	e029      	b.n	800141a <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	793a      	ldrb	r2, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	2b9f      	cmp	r3, #159	; 0x9f
 80013ce:	dd12      	ble.n	80013f6 <ILI9163_drawString+0x4a>
			x = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 80013d4:	797a      	ldrb	r2, [r7, #5]
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	4413      	add	r3, r2
 80013da:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 80013dc:	7bbb      	ldrb	r3, [r7, #14]
 80013de:	797a      	ldrb	r2, [r7, #5]
 80013e0:	4413      	add	r3, r2
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	dc1e      	bgt.n	8001424 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d103      	bne.n	80013f6 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80013f4:	e011      	b.n	800141a <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	7bb9      	ldrb	r1, [r7, #14]
 80013fc:	7bf8      	ldrb	r0, [r7, #15]
 80013fe:	8c3b      	ldrh	r3, [r7, #32]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f7ff ff85 	bl	8001316 <ILI9163_drawChar>

		x += font.width;
 800140c:	793a      	ldrb	r2, [r7, #4]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	4413      	add	r3, r2
 8001412:	73fb      	strb	r3, [r7, #15]
		string++;
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	3301      	adds	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1d1      	bne.n	80013c6 <ILI9163_drawString+0x1a>
	}
}
 8001422:	e000      	b.n	8001426 <ILI9163_drawString+0x7a>
				break;
 8001424:	bf00      	nop
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}

0800142e <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b099      	sub	sp, #100	; 0x64
 8001432:	af02      	add	r7, sp, #8
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	e881 000c 	stmia.w	r1, {r2, r3}
 800143e:	4623      	mov	r3, r4
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	4603      	mov	r3, r0
 8001444:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8001446:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800144a:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 800144c:	f107 0018 	add.w	r0, r7, #24
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001454:	213f      	movs	r1, #63	; 0x3f
 8001456:	f003 f98f 	bl	8004778 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 800145a:	7bb9      	ldrb	r1, [r7, #14]
 800145c:	7bf8      	ldrb	r0, [r7, #15]
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	cb0c      	ldmia	r3, {r2, r3}
 800146e:	f7ff ff9d 	bl	80013ac <ILI9163_drawString>
}
 8001472:	bf00      	nop
 8001474:	375c      	adds	r7, #92	; 0x5c
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}

0800147a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 f94c 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f805 	bl	8001494 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800148a:	f7ff fb33 	bl	8000af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x54>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x58>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 f967 	bl	8001786 <HAL_SYSTICK_Config>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00e      	b.n	80014e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2b0f      	cmp	r3, #15
 80014c6:	d80a      	bhi.n	80014de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c8:	2200      	movs	r2, #0
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f000 f92f 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d4:	4a06      	ldr	r2, [pc, #24]	; (80014f0 <HAL_InitTick+0x5c>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	e000      	b.n	80014e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000014 	.word	0x20000014
 80014f0:	20000010 	.word	0x20000010

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000014 	.word	0x20000014
 8001518:	2000a274 	.word	0x2000a274

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000a274 	.word	0x2000a274

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000014 	.word	0x20000014

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x40>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	05fa0000 	.word	0x05fa0000

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff3e 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff31 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff feb6 	bl	800151c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e099      	b.n	80018f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	e00f      	b.n	80017fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017de:	f7ff fe9d 	bl	800151c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d908      	bls.n	80017fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e078      	b.n	80018f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e8      	bne.n	80017de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_DMA_Init+0x158>)
 8001818:	4013      	ands	r3, r2
 800181a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4313      	orrs	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2b04      	cmp	r3, #4
 8001856:	d107      	bne.n	8001868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4313      	orrs	r3, r2
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b04      	cmp	r3, #4
 8001890:	d117      	bne.n	80018c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	4313      	orrs	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00e      	beq.n	80018c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fae7 	bl	8001e78 <DMA_CheckFifoParam>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2240      	movs	r2, #64	; 0x40
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018be:	2301      	movs	r3, #1
 80018c0:	e016      	b.n	80018f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa9e 	bl	8001e0c <DMA_CalcBaseAndBitshift>
 80018d0:	4603      	mov	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d8:	223f      	movs	r2, #63	; 0x3f
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	e010803f 	.word	0xe010803f

080018fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_DMA_Start_IT+0x26>
 800191e:	2302      	movs	r3, #2
 8001920:	e048      	b.n	80019b4 <HAL_DMA_Start_IT+0xb8>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d137      	bne.n	80019a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 fa30 	bl	8001db0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	223f      	movs	r2, #63	; 0x3f
 8001956:	409a      	lsls	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0216 	orr.w	r2, r2, #22
 800196a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e005      	b.n	80019b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019ca:	f7ff fda7 	bl	800151c <HAL_GetTick>
 80019ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e052      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0216 	bic.w	r2, r2, #22
 80019fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <HAL_DMA_Abort+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0208 	bic.w	r2, r2, #8
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3e:	e013      	b.n	8001a68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a40:	f7ff fd6c 	bl	800151c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d90c      	bls.n	8001a68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2220      	movs	r2, #32
 8001a52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2203      	movs	r2, #3
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e015      	b.n	8001a94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1e4      	bne.n	8001a40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7a:	223f      	movs	r2, #63	; 0x3f
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001aa8:	4b92      	ldr	r3, [pc, #584]	; (8001cf4 <HAL_DMA_IRQHandler+0x258>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a92      	ldr	r2, [pc, #584]	; (8001cf8 <HAL_DMA_IRQHandler+0x25c>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0204 	bic.w	r2, r2, #4
 8001aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2208      	movs	r2, #8
 8001af6:	409a      	lsls	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2204      	movs	r2, #4
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00b      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	2204      	movs	r2, #4
 8001b62:	409a      	lsls	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2210      	movs	r2, #16
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d043      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03c      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2210      	movs	r2, #16
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d024      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
 8001bca:	e01f      	b.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0208 	bic.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c10:	2220      	movs	r2, #32
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 808e 	beq.w	8001d3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8086 	beq.w	8001d3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	2220      	movs	r2, #32
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d136      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0216 	bic.w	r2, r2, #22
 8001c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_DMA_IRQHandler+0x1da>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0208 	bic.w	r2, r2, #8
 8001c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	223f      	movs	r2, #63	; 0x3f
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d07d      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
        }
        return;
 8001cb2:	e078      	b.n	8001da6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01c      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d030      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
 8001ce0:	e02b      	b.n	8001d3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
 8001cf2:	e022      	b.n	8001d3a <HAL_DMA_IRQHandler+0x29e>
 8001cf4:	20000004 	.word	0x20000004
 8001cf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10f      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0210 	bic.w	r2, r2, #16
 8001d18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d032      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d022      	beq.n	8001d94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d307      	bcc.n	8001d82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f2      	bne.n	8001d66 <HAL_DMA_IRQHandler+0x2ca>
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e000      	b.n	8001da8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001da6:	bf00      	nop
    }
  }
}
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop

08001db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b40      	cmp	r3, #64	; 0x40
 8001ddc:	d108      	bne.n	8001df0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dee:	e007      	b.n	8001e00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	60da      	str	r2, [r3, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3b10      	subs	r3, #16
 8001e1c:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <DMA_CalcBaseAndBitshift+0x60>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <DMA_CalcBaseAndBitshift+0x64>)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d908      	bls.n	8001e4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <DMA_CalcBaseAndBitshift+0x68>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	1d1a      	adds	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58
 8001e4a:	e006      	b.n	8001e5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <DMA_CalcBaseAndBitshift+0x68>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	aaaaaaab 	.word	0xaaaaaaab
 8001e70:	08005750 	.word	0x08005750
 8001e74:	fffffc00 	.word	0xfffffc00

08001e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11f      	bne.n	8001ed2 <DMA_CheckFifoParam+0x5a>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d856      	bhi.n	8001f46 <DMA_CheckFifoParam+0xce>
 8001e98:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <DMA_CheckFifoParam+0x28>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001ec3 	.word	0x08001ec3
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001f47 	.word	0x08001f47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d046      	beq.n	8001f4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec0:	e043      	b.n	8001f4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eca:	d140      	bne.n	8001f4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ed0:	e03d      	b.n	8001f4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eda:	d121      	bne.n	8001f20 <DMA_CheckFifoParam+0xa8>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d837      	bhi.n	8001f52 <DMA_CheckFifoParam+0xda>
 8001ee2:	a201      	add	r2, pc, #4	; (adr r2, 8001ee8 <DMA_CheckFifoParam+0x70>)
 8001ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee8:	08001ef9 	.word	0x08001ef9
 8001eec:	08001eff 	.word	0x08001eff
 8001ef0:	08001ef9 	.word	0x08001ef9
 8001ef4:	08001f11 	.word	0x08001f11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e030      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d025      	beq.n	8001f56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0e:	e022      	b.n	8001f56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f18:	d11f      	bne.n	8001f5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f1e:	e01c      	b.n	8001f5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d903      	bls.n	8001f2e <DMA_CheckFifoParam+0xb6>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d003      	beq.n	8001f34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f2c:	e018      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
      break;
 8001f32:	e015      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      break;
 8001f44:	e00b      	b.n	8001f5e <DMA_CheckFifoParam+0xe6>
      break;
 8001f46:	bf00      	nop
 8001f48:	e00a      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e008      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e006      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f52:	bf00      	nop
 8001f54:	e004      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
 8001f58:	e002      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f5a:	bf00      	nop
 8001f5c:	e000      	b.n	8001f60 <DMA_CheckFifoParam+0xe8>
      break;
 8001f5e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e175      	b.n	800227c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 8164 	bne.w	8002276 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00b      	beq.n	8001fce <HAL_GPIO_Init+0x5e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x100>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b12      	cmp	r3, #18
 800206e:	d123      	bne.n	80020b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80be 	beq.w	8002276 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	4b66      	ldr	r3, [pc, #408]	; (8002294 <HAL_GPIO_Init+0x324>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	4a65      	ldr	r2, [pc, #404]	; (8002294 <HAL_GPIO_Init+0x324>)
 8002100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002104:	6453      	str	r3, [r2, #68]	; 0x44
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_GPIO_Init+0x324>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002112:	4a61      	ldr	r2, [pc, #388]	; (8002298 <HAL_GPIO_Init+0x328>)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	220f      	movs	r2, #15
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_GPIO_Init+0x32c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d037      	beq.n	80021ae <HAL_GPIO_Init+0x23e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_GPIO_Init+0x330>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d031      	beq.n	80021aa <HAL_GPIO_Init+0x23a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_GPIO_Init+0x334>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02b      	beq.n	80021a6 <HAL_GPIO_Init+0x236>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a55      	ldr	r2, [pc, #340]	; (80022a8 <HAL_GPIO_Init+0x338>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d025      	beq.n	80021a2 <HAL_GPIO_Init+0x232>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a54      	ldr	r2, [pc, #336]	; (80022ac <HAL_GPIO_Init+0x33c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <HAL_GPIO_Init+0x22e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a53      	ldr	r2, [pc, #332]	; (80022b0 <HAL_GPIO_Init+0x340>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d019      	beq.n	800219a <HAL_GPIO_Init+0x22a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a52      	ldr	r2, [pc, #328]	; (80022b4 <HAL_GPIO_Init+0x344>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <HAL_GPIO_Init+0x348>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00d      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a50      	ldr	r2, [pc, #320]	; (80022bc <HAL_GPIO_Init+0x34c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4f      	ldr	r2, [pc, #316]	; (80022c0 <HAL_GPIO_Init+0x350>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_GPIO_Init+0x21a>
 8002186:	2309      	movs	r3, #9
 8002188:	e012      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800218a:	230a      	movs	r3, #10
 800218c:	e010      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800218e:	2308      	movs	r3, #8
 8002190:	e00e      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 8002192:	2307      	movs	r3, #7
 8002194:	e00c      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 8002196:	2306      	movs	r3, #6
 8002198:	e00a      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800219a:	2305      	movs	r3, #5
 800219c:	e008      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 800219e:	2304      	movs	r3, #4
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021a2:	2303      	movs	r3, #3
 80021a4:	e004      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e002      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_GPIO_Init+0x240>
 80021ae:	2300      	movs	r3, #0
 80021b0:	69fa      	ldr	r2, [r7, #28]
 80021b2:	f002 0203 	and.w	r2, r2, #3
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	4093      	lsls	r3, r2
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021c0:	4935      	ldr	r1, [pc, #212]	; (8002298 <HAL_GPIO_Init+0x328>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	3302      	adds	r3, #2
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ce:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <HAL_GPIO_Init+0x354>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f2:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_GPIO_Init+0x354>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f8:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HAL_GPIO_Init+0x354>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <HAL_GPIO_Init+0x354>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <HAL_GPIO_Init+0x354>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <HAL_GPIO_Init+0x354>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x354>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <HAL_GPIO_Init+0x354>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3301      	adds	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	f67f ae86 	bls.w	8001f90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3724      	adds	r7, #36	; 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	40013800 	.word	0x40013800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40020400 	.word	0x40020400
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020c00 	.word	0x40020c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40021400 	.word	0x40021400
 80022b4:	40021800 	.word	0x40021800
 80022b8:	40021c00 	.word	0x40021c00
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40022400 	.word	0x40022400
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	041a      	lsls	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43d9      	mvns	r1, r3
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	400b      	ands	r3, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e29b      	b.n	800287e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002354:	4b96      	ldr	r3, [pc, #600]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b04      	cmp	r3, #4
 800235e:	d00c      	beq.n	800237a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002360:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d112      	bne.n	8002392 <HAL_RCC_OscConfig+0x62>
 800236c:	4b90      	ldr	r3, [pc, #576]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002378:	d10b      	bne.n	8002392 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	4b8d      	ldr	r3, [pc, #564]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06c      	beq.n	8002460 <HAL_RCC_OscConfig+0x130>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d168      	bne.n	8002460 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e275      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x7a>
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a83      	ldr	r2, [pc, #524]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e02e      	b.n	8002408 <HAL_RCC_OscConfig+0xd8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x9c>
 80023b2:	4b7f      	ldr	r3, [pc, #508]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7e      	ldr	r2, [pc, #504]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b7c      	ldr	r3, [pc, #496]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7b      	ldr	r2, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xd8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0xc0>
 80023d6:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a75      	ldr	r2, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b73      	ldr	r3, [pc, #460]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a72      	ldr	r2, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xd8>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6b      	ldr	r2, [pc, #428]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff f884 	bl	800151c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff f880 	bl	800151c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e229      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xe8>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff f870 	bl	800151c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f86c 	bl	800151c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e215      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x110>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d069      	beq.n	8002542 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246e:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b4d      	ldr	r3, [pc, #308]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x190>
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x17a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1e9      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	493d      	ldr	r1, [pc, #244]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e040      	b.n	8002542 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f822 	bl	800151c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7ff f81e 	bl	800151c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1c7      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4929      	ldr	r1, [pc, #164]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
 800250e:	e018      	b.n	8002542 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a26      	ldr	r2, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fffe 	bl	800151c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe fffa 	bl	800151c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1a3      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d038      	beq.n	80025c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7fe ffdb 	bl	800151c <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256a:	f7fe ffd7 	bl	800151c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e180      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800257e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x23a>
 8002588:	e01a      	b.n	80025c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_RCC_OscConfig+0x280>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe ffc1 	bl	800151c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259e:	f7fe ffbd 	bl	800151c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d903      	bls.n	80025b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e166      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
 80025b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ee      	bne.n	800259e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a4 	beq.w	8002716 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b8c      	ldr	r3, [pc, #560]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	4b89      	ldr	r3, [pc, #548]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a88      	ldr	r2, [pc, #544]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b86      	ldr	r3, [pc, #536]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f6:	4b83      	ldr	r3, [pc, #524]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002602:	4b80      	ldr	r3, [pc, #512]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7f      	ldr	r2, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7fe ff85 	bl	800151c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7fe ff81 	bl	800151c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e12a      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4d4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x31a>
 800263c:	4b70      	ldr	r3, [pc, #448]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a6f      	ldr	r2, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e02d      	b.n	80026a6 <HAL_RCC_OscConfig+0x376>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x33c>
 8002652:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	4b68      	ldr	r3, [pc, #416]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a67      	ldr	r2, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	e01c      	b.n	80026a6 <HAL_RCC_OscConfig+0x376>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b05      	cmp	r3, #5
 8002672:	d10c      	bne.n	800268e <HAL_RCC_OscConfig+0x35e>
 8002674:	4b62      	ldr	r3, [pc, #392]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	4a61      	ldr	r2, [pc, #388]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6713      	str	r3, [r2, #112]	; 0x70
 8002680:	4b5f      	ldr	r3, [pc, #380]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a5e      	ldr	r2, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	e00b      	b.n	80026a6 <HAL_RCC_OscConfig+0x376>
 800268e:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	4a5b      	ldr	r2, [pc, #364]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	4b59      	ldr	r3, [pc, #356]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	4a58      	ldr	r2, [pc, #352]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	f023 0304 	bic.w	r3, r3, #4
 80026a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d015      	beq.n	80026da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe ff35 	bl	800151c <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe ff31 	bl	800151c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0d8      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ee      	beq.n	80026b6 <HAL_RCC_OscConfig+0x386>
 80026d8:	e014      	b.n	8002704 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe ff1f 	bl	800151c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe ff1b 	bl	800151c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0c2      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	4b41      	ldr	r3, [pc, #260]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ee      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d105      	bne.n	8002716 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a3c      	ldr	r2, [pc, #240]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80ae 	beq.w	800287c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d06d      	beq.n	8002808 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b02      	cmp	r3, #2
 8002732:	d14b      	bne.n	80027cc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b32      	ldr	r3, [pc, #200]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a31      	ldr	r2, [pc, #196]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe feec 	bl	800151c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fee8 	bl	800151c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e091      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	071b      	lsls	r3, r3, #28
 8002792:	491b      	ldr	r1, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 800279e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe feba 	bl	800151c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe feb6 	bl	800151c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e05f      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x47c>
 80027ca:	e057      	b.n	800287c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fea0 	bl	800151c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fe9c 	bl	800151c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e045      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_RCC_OscConfig+0x4d0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4b0>
 80027fe:	e03d      	b.n	800287c <HAL_RCC_OscConfig+0x54c>
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_OscConfig+0x558>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d030      	beq.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d129      	bne.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d122      	bne.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	4293      	cmp	r3, r2
 8002842:	d119      	bne.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d10f      	bne.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 020f 	bic.w	r2, r3, #15
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fdcc 	bl	800151c <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fdc8 	bl	800151c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 020f 	bic.w	r2, r3, #15
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1cc>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1d0>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd28 	bl	8001494 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08004fcc 	.word	0x08004fcc
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	20000010 	.word	0x20000010

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6079      	str	r1, [r7, #4]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	60f9      	str	r1, [r7, #12]
 8002a72:	2100      	movs	r1, #0
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002a76:	2100      	movs	r1, #0
 8002a78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7a:	4952      	ldr	r1, [pc, #328]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a7c:	6889      	ldr	r1, [r1, #8]
 8002a7e:	f001 010c 	and.w	r1, r1, #12
 8002a82:	2908      	cmp	r1, #8
 8002a84:	d00d      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a86:	2908      	cmp	r1, #8
 8002a88:	f200 8094 	bhi.w	8002bb4 <HAL_RCC_GetSysClockFreq+0x150>
 8002a8c:	2900      	cmp	r1, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x32>
 8002a90:	2904      	cmp	r1, #4
 8002a92:	d003      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x38>
 8002a94:	e08e      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a96:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a98:	60bb      	str	r3, [r7, #8]
      break;
 8002a9a:	e08e      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002a9e:	60bb      	str	r3, [r7, #8]
      break;
 8002aa0:	e08b      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa2:	4948      	ldr	r1, [pc, #288]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aa4:	6849      	ldr	r1, [r1, #4]
 8002aa6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002aaa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002aac:	4945      	ldr	r1, [pc, #276]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aae:	6849      	ldr	r1, [r1, #4]
 8002ab0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	d024      	beq.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab8:	4942      	ldr	r1, [pc, #264]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002aba:	6849      	ldr	r1, [r1, #4]
 8002abc:	0989      	lsrs	r1, r1, #6
 8002abe:	4608      	mov	r0, r1
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ac8:	f04f 0500 	mov.w	r5, #0
 8002acc:	ea00 0204 	and.w	r2, r0, r4
 8002ad0:	ea01 0305 	and.w	r3, r1, r5
 8002ad4:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ad6:	fb01 f003 	mul.w	r0, r1, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	fb01 f102 	mul.w	r1, r1, r2
 8002ae0:	1844      	adds	r4, r0, r1
 8002ae2:	493a      	ldr	r1, [pc, #232]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x168>)
 8002ae4:	fba2 0101 	umull	r0, r1, r2, r1
 8002ae8:	1863      	adds	r3, r4, r1
 8002aea:	4619      	mov	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fd fbf4 	bl	80002e0 <__aeabi_uldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4613      	mov	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e04a      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	ea02 0400 	and.w	r4, r2, r0
 8002b1a:	ea03 0501 	and.w	r5, r3, r1
 8002b1e:	4620      	mov	r0, r4
 8002b20:	4629      	mov	r1, r5
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	014b      	lsls	r3, r1, #5
 8002b2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b30:	0142      	lsls	r2, r0, #5
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	1b00      	subs	r0, r0, r4
 8002b38:	eb61 0105 	sbc.w	r1, r1, r5
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	018b      	lsls	r3, r1, #6
 8002b46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b4a:	0182      	lsls	r2, r0, #6
 8002b4c:	1a12      	subs	r2, r2, r0
 8002b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	00d9      	lsls	r1, r3, #3
 8002b5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b60:	00d0      	lsls	r0, r2, #3
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	1912      	adds	r2, r2, r4
 8002b68:	eb45 0303 	adc.w	r3, r5, r3
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0299      	lsls	r1, r3, #10
 8002b76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b7a:	0290      	lsls	r0, r2, #10
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	f7fd fba8 	bl	80002e0 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4613      	mov	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002bb6:	60bb      	str	r3, [r7, #8]
      break;
 8002bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bba:	68bb      	ldr	r3, [r7, #8]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	017d7840 	.word	0x017d7840

08002bd0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bec:	f7ff fff0 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	4903      	ldr	r1, [pc, #12]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08004fdc 	.word	0x08004fdc

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c14:	f7ff ffdc 	bl	8002bd0 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0b5b      	lsrs	r3, r3, #13
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08004fdc 	.word	0x08004fdc

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c6a:	6093      	str	r3, [r2, #8]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	4964      	ldr	r1, [pc, #400]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	4959      	ldr	r1, [pc, #356]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d017      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	494a      	ldr	r1, [pc, #296]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 808b 	beq.w	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a34      	ldr	r2, [pc, #208]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d40:	f7fe fbec 	bl	800151c <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe fbe8 	bl	800151c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e358      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d5a:	4b2c      	ldr	r3, [pc, #176]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d66:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d035      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d02e      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d114      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fbb0 	bl	800151c <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fbac 	bl	800151c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e31a      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ee      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dee:	d111      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dfe:	400b      	ands	r3, r1
 8002e00:	4901      	ldr	r1, [pc, #4]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	0ffffcff 	.word	0x0ffffcff
 8002e14:	4bb1      	ldr	r3, [pc, #708]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4ab0      	ldr	r2, [pc, #704]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e1e:	6093      	str	r3, [r2, #8]
 8002e20:	4bae      	ldr	r3, [pc, #696]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	49ab      	ldr	r1, [pc, #684]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e3e:	4ba7      	ldr	r3, [pc, #668]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e44:	4aa5      	ldr	r2, [pc, #660]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e4e:	4ba3      	ldr	r3, [pc, #652]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	49a0      	ldr	r1, [pc, #640]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e6c:	4b9b      	ldr	r3, [pc, #620]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7a:	4998      	ldr	r1, [pc, #608]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e8e:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e9c:	498f      	ldr	r1, [pc, #572]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb0:	4b8a      	ldr	r3, [pc, #552]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ebe:	4987      	ldr	r1, [pc, #540]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ed2:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	497e      	ldr	r1, [pc, #504]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ef4:	4b79      	ldr	r3, [pc, #484]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4976      	ldr	r1, [pc, #472]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f16:	4b71      	ldr	r3, [pc, #452]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f023 020c 	bic.w	r2, r3, #12
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	496d      	ldr	r1, [pc, #436]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	4965      	ldr	r1, [pc, #404]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f5a:	4b60      	ldr	r3, [pc, #384]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f68:	495c      	ldr	r1, [pc, #368]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f7c:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	4954      	ldr	r1, [pc, #336]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	494b      	ldr	r1, [pc, #300]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	4943      	ldr	r1, [pc, #268]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	493a      	ldr	r1, [pc, #232]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003012:	4932      	ldr	r1, [pc, #200]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d011      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003034:	4929      	ldr	r1, [pc, #164]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d101      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	491d      	ldr	r1, [pc, #116]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003078:	4b18      	ldr	r3, [pc, #96]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003088:	4914      	ldr	r1, [pc, #80]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	490b      	ldr	r1, [pc, #44]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00f      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	4902      	ldr	r1, [pc, #8]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030ec:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030fc:	497d      	ldr	r1, [pc, #500]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d006      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80d6 	beq.w	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003118:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a75      	ldr	r2, [pc, #468]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800311e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003124:	f7fe f9fa 	bl	800151c <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x506>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800312c:	f7fe f9f6 	bl	800151c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e166      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d021      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11d      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	0c1b      	lsrs	r3, r3, #16
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800316c:	4b61      	ldr	r3, [pc, #388]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003172:	0e1b      	lsrs	r3, r3, #24
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	019a      	lsls	r2, r3, #6
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	071b      	lsls	r3, r3, #28
 8003192:	4958      	ldr	r1, [pc, #352]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x58e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d02e      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c4:	d129      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x5e2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031c6:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80031c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031cc:	0c1b      	lsrs	r3, r3, #16
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	493e      	ldr	r1, [pc, #248]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003202:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003208:	f023 021f 	bic.w	r2, r3, #31
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	3b01      	subs	r3, #1
 8003212:	4938      	ldr	r1, [pc, #224]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01d      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003226:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322c:	0e1b      	lsrs	r3, r3, #24
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4926      	ldr	r1, [pc, #152]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d011      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	491a      	ldr	r1, [pc, #104]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8003298:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329e:	f7fe f93d 	bl	800151c <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032a6:	f7fe f939 	bl	800151c <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b64      	cmp	r3, #100	; 0x64
 80032b2:	d901      	bls.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0a9      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 809f 	bne.w	800340a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fe f920 	bl	800151c <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032de:	e00b      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032e0:	f7fe f91c 	bl	800151c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d904      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e08c      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003304:	d0ec      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x74c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12a      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800332e:	4b39      	ldr	r3, [pc, #228]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	0f1b      	lsrs	r3, r3, #28
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	019a      	lsls	r2, r3, #6
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	061b      	lsls	r3, r3, #24
 800335c:	431a      	orrs	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	071b      	lsls	r3, r3, #28
 8003362:	492c      	ldr	r1, [pc, #176]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800336a:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800336c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003370:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	3b01      	subs	r3, #1
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4925      	ldr	r1, [pc, #148]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d022      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003398:	d11d      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	0e1b      	lsrs	r3, r3, #24
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033a8:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	0f1b      	lsrs	r3, r3, #28
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	019a      	lsls	r2, r3, #6
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	071b      	lsls	r3, r3, #28
 80033ce:	4911      	ldr	r1, [pc, #68]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a0e      	ldr	r2, [pc, #56]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fe f89b 	bl	800151c <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033ea:	f7fe f897 	bl	800151c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e007      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003408:	d1ef      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e09d      	b.n	8003566 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d009      	beq.n	8003450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
 8003442:	e005      	b.n	8003450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fb66 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003490:	d902      	bls.n	8003498 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e002      	b.n	800349e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80034a6:	d007      	beq.n	80034b8 <HAL_SPI_Init+0xa0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034b0:	d002      	beq.n	80034b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	ea42 0103 	orr.w	r1, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	0c1b      	lsrs	r3, r3, #16
 8003514:	f003 0204 	and.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b088      	sub	sp, #32
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_SPI_Transmit+0x22>
 800358c:	2302      	movs	r3, #2
 800358e:	e158      	b.n	8003842 <HAL_SPI_Transmit+0x2d4>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003598:	f7fd ffc0 	bl	800151c <HAL_GetTick>
 800359c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035b2:	e13d      	b.n	8003830 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Transmit+0x52>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035c4:	e134      	b.n	8003830 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2203      	movs	r2, #3
 80035ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003610:	d10f      	bne.n	8003632 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363c:	2b40      	cmp	r3, #64	; 0x40
 800363e:	d007      	beq.n	8003650 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003658:	d94b      	bls.n	80036f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_SPI_Transmit+0xfa>
 8003662:	8afb      	ldrh	r3, [r7, #22]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d13e      	bne.n	80036e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800368c:	e02b      	b.n	80036e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d112      	bne.n	80036c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036c0:	e011      	b.n	80036e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036c2:	f7fd ff2b 	bl	800151c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d803      	bhi.n	80036da <HAL_SPI_Transmit+0x16c>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d102      	bne.n	80036e0 <HAL_SPI_Transmit+0x172>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036e4:	e0a4      	b.n	8003830 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ce      	bne.n	800368e <HAL_SPI_Transmit+0x120>
 80036f0:	e07c      	b.n	80037ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Transmit+0x192>
 80036fa:	8afb      	ldrh	r3, [r7, #22]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d170      	bne.n	80037e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d912      	bls.n	8003730 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	1c9a      	adds	r2, r3, #2
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b02      	subs	r3, #2
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800372e:	e058      	b.n	80037e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	7812      	ldrb	r2, [r2, #0]
 800373c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003756:	e044      	b.n	80037e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d12b      	bne.n	80037be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d912      	bls.n	8003796 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b02      	subs	r3, #2
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003794:	e025      	b.n	80037e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037bc:	e011      	b.n	80037e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037be:	f7fd fead 	bl	800151c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d803      	bhi.n	80037d6 <HAL_SPI_Transmit+0x268>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d102      	bne.n	80037dc <HAL_SPI_Transmit+0x26e>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037e0:	e026      	b.n	8003830 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1b5      	bne.n	8003758 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb05 	bl	8003e00 <SPI_EndRxTxTransaction>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e000      	b.n	8003830 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800382e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003840:	7ffb      	ldrb	r3, [r7, #31]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_SPI_Transmit_DMA+0x20>
 8003868:	2302      	movs	r3, #2
 800386a:	e0d8      	b.n	8003a1e <HAL_SPI_Transmit_DMA+0x1d2>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	d002      	beq.n	8003886 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003884:	e0c6      	b.n	8003a14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_Transmit_DMA+0x46>
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003896:	e0bd      	b.n	8003a14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e2:	d10f      	bne.n	8003904 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	4a47      	ldr	r2, [pc, #284]	; (8003a28 <HAL_SPI_Transmit_DMA+0x1dc>)
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	4a46      	ldr	r2, [pc, #280]	; (8003a2c <HAL_SPI_Transmit_DMA+0x1e0>)
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	4a45      	ldr	r2, [pc, #276]	; (8003a30 <HAL_SPI_Transmit_DMA+0x1e4>)
 800391a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	2200      	movs	r2, #0
 8003922:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003932:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800393c:	d82d      	bhi.n	800399a <HAL_SPI_Transmit_DMA+0x14e>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003948:	d127      	bne.n	800399a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003966:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003976:	e010      	b.n	800399a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003986:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398c:	b29b      	uxth	r3, r3
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	b29b      	uxth	r3, r3
 8003992:	3301      	adds	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	4619      	mov	r1, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80039b2:	f7fd ffa3 	bl	80018fc <HAL_DMA_Start_IT>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00c      	beq.n	80039d6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80039d4:	e01e      	b.n	8003a14 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0220 	orr.w	r2, r2, #32
 8003a02:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0202 	orr.w	r2, r2, #2
 8003a12:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08003b6f 	.word	0x08003b6f
 8003a2c:	08003ac7 	.word	0x08003ac7
 8003a30:	08003b8b 	.word	0x08003b8b

08003a34 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00f      	beq.n	8003a68 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd ffb5 	bl	80019bc <HAL_DMA_Abort>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d007      	beq.n	8003a68 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a5c:	f043 0210 	orr.w	r2, r3, #16
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00f      	beq.n	8003a90 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd ffa1 	bl	80019bc <HAL_DMA_Abort>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a84:	f043 0210 	orr.w	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0203 	bic.w	r2, r2, #3
 8003a9e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b086      	sub	sp, #24
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad4:	f7fd fd22 	bl	800151c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae8:	d03b      	beq.n	8003b62 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0220 	bic.w	r2, r2, #32
 8003af8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0202 	bic.w	r2, r2, #2
 8003b08:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	2164      	movs	r1, #100	; 0x64
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f000 f976 	bl	8003e00 <SPI_EndRxTxTransaction>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7fc fd5c 	bl	8000618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b60:	e002      	b.n	8003b68 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7fc fd38 	bl	80005d8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff ff98 	bl	8003ab2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0203 	bic.w	r2, r2, #3
 8003ba6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7fc fd2b 	bl	8000618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bdc:	f7fd fc9e 	bl	800151c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	4413      	add	r3, r2
 8003bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bec:	f7fd fc96 	bl	800151c <HAL_GetTick>
 8003bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bf2:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	015b      	lsls	r3, r3, #5
 8003bf8:	0d1b      	lsrs	r3, r3, #20
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c02:	e054      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0a:	d050      	beq.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c0c:	f7fd fc86 	bl	800151c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d902      	bls.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d13d      	bne.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d111      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d004      	beq.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d107      	bne.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d10f      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e017      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d19b      	bne.n	8003c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000004 	.word	0x20000004

08003cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cea:	f7fd fc17 	bl	800151c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cfa:	f7fd fc0f 	bl	800151c <HAL_GetTick>
 8003cfe:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00da      	lsls	r2, r3, #3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	0d1b      	lsrs	r3, r3, #20
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d18:	e062      	b.n	8003de0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d20:	d109      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	330c      	adds	r3, #12
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003d34:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d050      	beq.n	8003de0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d3e:	f7fd fbed 	bl	800151c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d902      	bls.n	8003d54 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d13d      	bne.n	8003dd0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d6c:	d111      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d76:	d004      	beq.n	8003d82 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d80:	d107      	bne.n	8003d92 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d10f      	bne.n	8003dbc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e010      	b.n	8003df2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d194      	bne.n	8003d1a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000004 	.word	0x20000004

08003e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f7ff ff5f 	bl	8003cdc <SPI_WaitFifoStateUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	f043 0220 	orr.w	r2, r3, #32
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e027      	b.n	8003e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fec4 	bl	8003bcc <SPI_WaitFlagStateUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e014      	b.n	8003e84 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff ff38 	bl	8003cdc <SPI_WaitFifoStateUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e000      	b.n	8003e84 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e040      	b.n	8003f20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fec6 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	; 0x24
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f82c 	bl	8003f28 <UART_SetConfig>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e022      	b.n	8003f20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa82 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fb09 	bl	8004530 <UART_CheckIdleState>
 8003f1e:	4603      	mov	r3, r0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4ba7      	ldr	r3, [pc, #668]	; (80041f0 <UART_SetConfig+0x2c8>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a95      	ldr	r2, [pc, #596]	; (80041f4 <UART_SetConfig+0x2cc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d120      	bne.n	8003fe6 <UART_SetConfig+0xbe>
 8003fa4:	4b94      	ldr	r3, [pc, #592]	; (80041f8 <UART_SetConfig+0x2d0>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d816      	bhi.n	8003fe0 <UART_SetConfig+0xb8>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x90>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fd5 	.word	0x08003fd5
 8003fc0:	08003fcf 	.word	0x08003fcf
 8003fc4:	08003fdb 	.word	0x08003fdb
 8003fc8:	2301      	movs	r3, #1
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e14f      	b.n	800426e <UART_SetConfig+0x346>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e14c      	b.n	800426e <UART_SetConfig+0x346>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e149      	b.n	800426e <UART_SetConfig+0x346>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e146      	b.n	800426e <UART_SetConfig+0x346>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e143      	b.n	800426e <UART_SetConfig+0x346>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a84      	ldr	r2, [pc, #528]	; (80041fc <UART_SetConfig+0x2d4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d132      	bne.n	8004056 <UART_SetConfig+0x12e>
 8003ff0:	4b81      	ldr	r3, [pc, #516]	; (80041f8 <UART_SetConfig+0x2d0>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b0c      	cmp	r3, #12
 8003ffc:	d828      	bhi.n	8004050 <UART_SetConfig+0x128>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0xdc>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004039 	.word	0x08004039
 8004008:	08004051 	.word	0x08004051
 800400c:	08004051 	.word	0x08004051
 8004010:	08004051 	.word	0x08004051
 8004014:	08004045 	.word	0x08004045
 8004018:	08004051 	.word	0x08004051
 800401c:	08004051 	.word	0x08004051
 8004020:	08004051 	.word	0x08004051
 8004024:	0800403f 	.word	0x0800403f
 8004028:	08004051 	.word	0x08004051
 800402c:	08004051 	.word	0x08004051
 8004030:	08004051 	.word	0x08004051
 8004034:	0800404b 	.word	0x0800404b
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e117      	b.n	800426e <UART_SetConfig+0x346>
 800403e:	2302      	movs	r3, #2
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e114      	b.n	800426e <UART_SetConfig+0x346>
 8004044:	2304      	movs	r3, #4
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e111      	b.n	800426e <UART_SetConfig+0x346>
 800404a:	2308      	movs	r3, #8
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e10e      	b.n	800426e <UART_SetConfig+0x346>
 8004050:	2310      	movs	r3, #16
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e10b      	b.n	800426e <UART_SetConfig+0x346>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a69      	ldr	r2, [pc, #420]	; (8004200 <UART_SetConfig+0x2d8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d120      	bne.n	80040a2 <UART_SetConfig+0x17a>
 8004060:	4b65      	ldr	r3, [pc, #404]	; (80041f8 <UART_SetConfig+0x2d0>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800406a:	2b30      	cmp	r3, #48	; 0x30
 800406c:	d013      	beq.n	8004096 <UART_SetConfig+0x16e>
 800406e:	2b30      	cmp	r3, #48	; 0x30
 8004070:	d814      	bhi.n	800409c <UART_SetConfig+0x174>
 8004072:	2b20      	cmp	r3, #32
 8004074:	d009      	beq.n	800408a <UART_SetConfig+0x162>
 8004076:	2b20      	cmp	r3, #32
 8004078:	d810      	bhi.n	800409c <UART_SetConfig+0x174>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <UART_SetConfig+0x15c>
 800407e:	2b10      	cmp	r3, #16
 8004080:	d006      	beq.n	8004090 <UART_SetConfig+0x168>
 8004082:	e00b      	b.n	800409c <UART_SetConfig+0x174>
 8004084:	2300      	movs	r3, #0
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e0f1      	b.n	800426e <UART_SetConfig+0x346>
 800408a:	2302      	movs	r3, #2
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e0ee      	b.n	800426e <UART_SetConfig+0x346>
 8004090:	2304      	movs	r3, #4
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0eb      	b.n	800426e <UART_SetConfig+0x346>
 8004096:	2308      	movs	r3, #8
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e0e8      	b.n	800426e <UART_SetConfig+0x346>
 800409c:	2310      	movs	r3, #16
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e0e5      	b.n	800426e <UART_SetConfig+0x346>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a57      	ldr	r2, [pc, #348]	; (8004204 <UART_SetConfig+0x2dc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d120      	bne.n	80040ee <UART_SetConfig+0x1c6>
 80040ac:	4b52      	ldr	r3, [pc, #328]	; (80041f8 <UART_SetConfig+0x2d0>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040b6:	2bc0      	cmp	r3, #192	; 0xc0
 80040b8:	d013      	beq.n	80040e2 <UART_SetConfig+0x1ba>
 80040ba:	2bc0      	cmp	r3, #192	; 0xc0
 80040bc:	d814      	bhi.n	80040e8 <UART_SetConfig+0x1c0>
 80040be:	2b80      	cmp	r3, #128	; 0x80
 80040c0:	d009      	beq.n	80040d6 <UART_SetConfig+0x1ae>
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d810      	bhi.n	80040e8 <UART_SetConfig+0x1c0>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <UART_SetConfig+0x1a8>
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d006      	beq.n	80040dc <UART_SetConfig+0x1b4>
 80040ce:	e00b      	b.n	80040e8 <UART_SetConfig+0x1c0>
 80040d0:	2300      	movs	r3, #0
 80040d2:	77fb      	strb	r3, [r7, #31]
 80040d4:	e0cb      	b.n	800426e <UART_SetConfig+0x346>
 80040d6:	2302      	movs	r3, #2
 80040d8:	77fb      	strb	r3, [r7, #31]
 80040da:	e0c8      	b.n	800426e <UART_SetConfig+0x346>
 80040dc:	2304      	movs	r3, #4
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e0c5      	b.n	800426e <UART_SetConfig+0x346>
 80040e2:	2308      	movs	r3, #8
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	e0c2      	b.n	800426e <UART_SetConfig+0x346>
 80040e8:	2310      	movs	r3, #16
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0bf      	b.n	800426e <UART_SetConfig+0x346>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a45      	ldr	r2, [pc, #276]	; (8004208 <UART_SetConfig+0x2e0>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d125      	bne.n	8004144 <UART_SetConfig+0x21c>
 80040f8:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <UART_SetConfig+0x2d0>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004106:	d017      	beq.n	8004138 <UART_SetConfig+0x210>
 8004108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800410c:	d817      	bhi.n	800413e <UART_SetConfig+0x216>
 800410e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004112:	d00b      	beq.n	800412c <UART_SetConfig+0x204>
 8004114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004118:	d811      	bhi.n	800413e <UART_SetConfig+0x216>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <UART_SetConfig+0x1fe>
 800411e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004122:	d006      	beq.n	8004132 <UART_SetConfig+0x20a>
 8004124:	e00b      	b.n	800413e <UART_SetConfig+0x216>
 8004126:	2300      	movs	r3, #0
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0a0      	b.n	800426e <UART_SetConfig+0x346>
 800412c:	2302      	movs	r3, #2
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e09d      	b.n	800426e <UART_SetConfig+0x346>
 8004132:	2304      	movs	r3, #4
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e09a      	b.n	800426e <UART_SetConfig+0x346>
 8004138:	2308      	movs	r3, #8
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e097      	b.n	800426e <UART_SetConfig+0x346>
 800413e:	2310      	movs	r3, #16
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e094      	b.n	800426e <UART_SetConfig+0x346>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a30      	ldr	r2, [pc, #192]	; (800420c <UART_SetConfig+0x2e4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d125      	bne.n	800419a <UART_SetConfig+0x272>
 800414e:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <UART_SetConfig+0x2d0>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800415c:	d017      	beq.n	800418e <UART_SetConfig+0x266>
 800415e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004162:	d817      	bhi.n	8004194 <UART_SetConfig+0x26c>
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004168:	d00b      	beq.n	8004182 <UART_SetConfig+0x25a>
 800416a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416e:	d811      	bhi.n	8004194 <UART_SetConfig+0x26c>
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <UART_SetConfig+0x254>
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d006      	beq.n	8004188 <UART_SetConfig+0x260>
 800417a:	e00b      	b.n	8004194 <UART_SetConfig+0x26c>
 800417c:	2301      	movs	r3, #1
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e075      	b.n	800426e <UART_SetConfig+0x346>
 8004182:	2302      	movs	r3, #2
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e072      	b.n	800426e <UART_SetConfig+0x346>
 8004188:	2304      	movs	r3, #4
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e06f      	b.n	800426e <UART_SetConfig+0x346>
 800418e:	2308      	movs	r3, #8
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e06c      	b.n	800426e <UART_SetConfig+0x346>
 8004194:	2310      	movs	r3, #16
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e069      	b.n	800426e <UART_SetConfig+0x346>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1c      	ldr	r2, [pc, #112]	; (8004210 <UART_SetConfig+0x2e8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d137      	bne.n	8004214 <UART_SetConfig+0x2ec>
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <UART_SetConfig+0x2d0>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041b2:	d017      	beq.n	80041e4 <UART_SetConfig+0x2bc>
 80041b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041b8:	d817      	bhi.n	80041ea <UART_SetConfig+0x2c2>
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d00b      	beq.n	80041d8 <UART_SetConfig+0x2b0>
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c4:	d811      	bhi.n	80041ea <UART_SetConfig+0x2c2>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <UART_SetConfig+0x2aa>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d006      	beq.n	80041de <UART_SetConfig+0x2b6>
 80041d0:	e00b      	b.n	80041ea <UART_SetConfig+0x2c2>
 80041d2:	2300      	movs	r3, #0
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e04a      	b.n	800426e <UART_SetConfig+0x346>
 80041d8:	2302      	movs	r3, #2
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e047      	b.n	800426e <UART_SetConfig+0x346>
 80041de:	2304      	movs	r3, #4
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e044      	b.n	800426e <UART_SetConfig+0x346>
 80041e4:	2308      	movs	r3, #8
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e041      	b.n	800426e <UART_SetConfig+0x346>
 80041ea:	2310      	movs	r3, #16
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e03e      	b.n	800426e <UART_SetConfig+0x346>
 80041f0:	efff69f3 	.word	0xefff69f3
 80041f4:	40011000 	.word	0x40011000
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40004400 	.word	0x40004400
 8004200:	40004800 	.word	0x40004800
 8004204:	40004c00 	.word	0x40004c00
 8004208:	40005000 	.word	0x40005000
 800420c:	40011400 	.word	0x40011400
 8004210:	40007800 	.word	0x40007800
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a71      	ldr	r2, [pc, #452]	; (80043e0 <UART_SetConfig+0x4b8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d125      	bne.n	800426a <UART_SetConfig+0x342>
 800421e:	4b71      	ldr	r3, [pc, #452]	; (80043e4 <UART_SetConfig+0x4bc>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004228:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800422c:	d017      	beq.n	800425e <UART_SetConfig+0x336>
 800422e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004232:	d817      	bhi.n	8004264 <UART_SetConfig+0x33c>
 8004234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004238:	d00b      	beq.n	8004252 <UART_SetConfig+0x32a>
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423e:	d811      	bhi.n	8004264 <UART_SetConfig+0x33c>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <UART_SetConfig+0x324>
 8004244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004248:	d006      	beq.n	8004258 <UART_SetConfig+0x330>
 800424a:	e00b      	b.n	8004264 <UART_SetConfig+0x33c>
 800424c:	2300      	movs	r3, #0
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e00d      	b.n	800426e <UART_SetConfig+0x346>
 8004252:	2302      	movs	r3, #2
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e00a      	b.n	800426e <UART_SetConfig+0x346>
 8004258:	2304      	movs	r3, #4
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e007      	b.n	800426e <UART_SetConfig+0x346>
 800425e:	2308      	movs	r3, #8
 8004260:	77fb      	strb	r3, [r7, #31]
 8004262:	e004      	b.n	800426e <UART_SetConfig+0x346>
 8004264:	2310      	movs	r3, #16
 8004266:	77fb      	strb	r3, [r7, #31]
 8004268:	e001      	b.n	800426e <UART_SetConfig+0x346>
 800426a:	2310      	movs	r3, #16
 800426c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004276:	d15b      	bne.n	8004330 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004278:	7ffb      	ldrb	r3, [r7, #31]
 800427a:	2b08      	cmp	r3, #8
 800427c:	d827      	bhi.n	80042ce <UART_SetConfig+0x3a6>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x35c>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042b1 	.word	0x080042b1
 800428c:	080042b9 	.word	0x080042b9
 8004290:	080042cf 	.word	0x080042cf
 8004294:	080042bf 	.word	0x080042bf
 8004298:	080042cf 	.word	0x080042cf
 800429c:	080042cf 	.word	0x080042cf
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	080042c7 	.word	0x080042c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a8:	f7fe fc9e 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 80042ac:	61b8      	str	r0, [r7, #24]
        break;
 80042ae:	e013      	b.n	80042d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fcae 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 80042b4:	61b8      	str	r0, [r7, #24]
        break;
 80042b6:	e00f      	b.n	80042d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042b8:	4b4b      	ldr	r3, [pc, #300]	; (80043e8 <UART_SetConfig+0x4c0>)
 80042ba:	61bb      	str	r3, [r7, #24]
        break;
 80042bc:	e00c      	b.n	80042d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042be:	f7fe fbd1 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 80042c2:	61b8      	str	r0, [r7, #24]
        break;
 80042c4:	e008      	b.n	80042d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	61bb      	str	r3, [r7, #24]
        break;
 80042cc:	e004      	b.n	80042d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77bb      	strb	r3, [r7, #30]
        break;
 80042d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d074      	beq.n	80043c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	005a      	lsls	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	441a      	add	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	d916      	bls.n	800432a <UART_SetConfig+0x402>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d212      	bcs.n	800432a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f023 030f 	bic.w	r3, r3, #15
 800430c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	085b      	lsrs	r3, r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	b29a      	uxth	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	4313      	orrs	r3, r2
 800431e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	89fa      	ldrh	r2, [r7, #14]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e04e      	b.n	80043c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	77bb      	strb	r3, [r7, #30]
 800432e:	e04b      	b.n	80043c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d827      	bhi.n	8004386 <UART_SetConfig+0x45e>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0x414>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	08004387 	.word	0x08004387
 800434c:	08004377 	.word	0x08004377
 8004350:	08004387 	.word	0x08004387
 8004354:	08004387 	.word	0x08004387
 8004358:	08004387 	.word	0x08004387
 800435c:	0800437f 	.word	0x0800437f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004360:	f7fe fc42 	bl	8002be8 <HAL_RCC_GetPCLK1Freq>
 8004364:	61b8      	str	r0, [r7, #24]
        break;
 8004366:	e013      	b.n	8004390 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7fe fc52 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 800436c:	61b8      	str	r0, [r7, #24]
        break;
 800436e:	e00f      	b.n	8004390 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <UART_SetConfig+0x4c0>)
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e00c      	b.n	8004390 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004376:	f7fe fb75 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 800437a:	61b8      	str	r0, [r7, #24]
        break;
 800437c:	e008      	b.n	8004390 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e004      	b.n	8004390 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77bb      	strb	r3, [r7, #30]
        break;
 800438e:	bf00      	nop
    }

    if (pclk != 0U)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085a      	lsrs	r2, r3, #1
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	441a      	add	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0f      	cmp	r3, #15
 80043b0:	d908      	bls.n	80043c4 <UART_SetConfig+0x49c>
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b8:	d204      	bcs.n	80043c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e001      	b.n	80043c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80043d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40007c00 	.word	0x40007c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	00f42400 	.word	0x00f42400

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004540:	f7fc ffec 	bl	800151c <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10e      	bne.n	8004572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f82d 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e023      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d10e      	bne.n	800459e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f817 	bl	80045c2 <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00d      	b.n	80045ba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d2:	e05e      	b.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d05a      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fc ff9e 	bl	800151c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11b      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004600:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2220      	movs	r2, #32
 800461c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e043      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02c      	beq.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d124      	bne.n	8004692 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004650:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004660:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e00f      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4013      	ands	r3, r2
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	429a      	cmp	r2, r3
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d091      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000018 	.word	0x20000018

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4d0d      	ldr	r5, [pc, #52]	; (8004700 <__libc_init_array+0x38>)
 80046cc:	4c0d      	ldr	r4, [pc, #52]	; (8004704 <__libc_init_array+0x3c>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	2600      	movs	r6, #0
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	4d0b      	ldr	r5, [pc, #44]	; (8004708 <__libc_init_array+0x40>)
 80046da:	4c0c      	ldr	r4, [pc, #48]	; (800470c <__libc_init_array+0x44>)
 80046dc:	f000 fc68 	bl	8004fb0 <_init>
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	2600      	movs	r6, #0
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08005794 	.word	0x08005794
 8004704:	08005794 	.word	0x08005794
 8004708:	08005794 	.word	0x08005794
 800470c:	08005798 	.word	0x08005798

08004710 <memset>:
 8004710:	4402      	add	r2, r0
 8004712:	4603      	mov	r3, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <_vsniprintf_r>:
 8004720:	b530      	push	{r4, r5, lr}
 8004722:	1e14      	subs	r4, r2, #0
 8004724:	4605      	mov	r5, r0
 8004726:	b09b      	sub	sp, #108	; 0x6c
 8004728:	4618      	mov	r0, r3
 800472a:	da05      	bge.n	8004738 <_vsniprintf_r+0x18>
 800472c:	238b      	movs	r3, #139	; 0x8b
 800472e:	602b      	str	r3, [r5, #0]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	b01b      	add	sp, #108	; 0x6c
 8004736:	bd30      	pop	{r4, r5, pc}
 8004738:	f44f 7302 	mov.w	r3, #520	; 0x208
 800473c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004740:	bf14      	ite	ne
 8004742:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004746:	4623      	moveq	r3, r4
 8004748:	9302      	str	r3, [sp, #8]
 800474a:	9305      	str	r3, [sp, #20]
 800474c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004750:	9100      	str	r1, [sp, #0]
 8004752:	9104      	str	r1, [sp, #16]
 8004754:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004758:	4602      	mov	r2, r0
 800475a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800475c:	4669      	mov	r1, sp
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f874 	bl	800484c <_svfiprintf_r>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	bfbc      	itt	lt
 8004768:	238b      	movlt	r3, #139	; 0x8b
 800476a:	602b      	strlt	r3, [r5, #0]
 800476c:	2c00      	cmp	r4, #0
 800476e:	d0e1      	beq.n	8004734 <_vsniprintf_r+0x14>
 8004770:	9b00      	ldr	r3, [sp, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e7dd      	b.n	8004734 <_vsniprintf_r+0x14>

08004778 <vsniprintf>:
 8004778:	b507      	push	{r0, r1, r2, lr}
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	460a      	mov	r2, r1
 8004780:	4601      	mov	r1, r0
 8004782:	4803      	ldr	r0, [pc, #12]	; (8004790 <vsniprintf+0x18>)
 8004784:	6800      	ldr	r0, [r0, #0]
 8004786:	f7ff ffcb 	bl	8004720 <_vsniprintf_r>
 800478a:	b003      	add	sp, #12
 800478c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004790:	20000018 	.word	0x20000018

08004794 <__ssputs_r>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	688e      	ldr	r6, [r1, #8]
 800479a:	429e      	cmp	r6, r3
 800479c:	4682      	mov	sl, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4690      	mov	r8, r2
 80047a2:	461f      	mov	r7, r3
 80047a4:	d838      	bhi.n	8004818 <__ssputs_r+0x84>
 80047a6:	898a      	ldrh	r2, [r1, #12]
 80047a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047ac:	d032      	beq.n	8004814 <__ssputs_r+0x80>
 80047ae:	6825      	ldr	r5, [r4, #0]
 80047b0:	6909      	ldr	r1, [r1, #16]
 80047b2:	eba5 0901 	sub.w	r9, r5, r1
 80047b6:	6965      	ldr	r5, [r4, #20]
 80047b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047c0:	3301      	adds	r3, #1
 80047c2:	444b      	add	r3, r9
 80047c4:	106d      	asrs	r5, r5, #1
 80047c6:	429d      	cmp	r5, r3
 80047c8:	bf38      	it	cc
 80047ca:	461d      	movcc	r5, r3
 80047cc:	0553      	lsls	r3, r2, #21
 80047ce:	d531      	bpl.n	8004834 <__ssputs_r+0xa0>
 80047d0:	4629      	mov	r1, r5
 80047d2:	f000 fb47 	bl	8004e64 <_malloc_r>
 80047d6:	4606      	mov	r6, r0
 80047d8:	b950      	cbnz	r0, 80047f0 <__ssputs_r+0x5c>
 80047da:	230c      	movs	r3, #12
 80047dc:	f8ca 3000 	str.w	r3, [sl]
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f0:	6921      	ldr	r1, [r4, #16]
 80047f2:	464a      	mov	r2, r9
 80047f4:	f000 fabe 	bl	8004d74 <memcpy>
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	6126      	str	r6, [r4, #16]
 8004806:	6165      	str	r5, [r4, #20]
 8004808:	444e      	add	r6, r9
 800480a:	eba5 0509 	sub.w	r5, r5, r9
 800480e:	6026      	str	r6, [r4, #0]
 8004810:	60a5      	str	r5, [r4, #8]
 8004812:	463e      	mov	r6, r7
 8004814:	42be      	cmp	r6, r7
 8004816:	d900      	bls.n	800481a <__ssputs_r+0x86>
 8004818:	463e      	mov	r6, r7
 800481a:	4632      	mov	r2, r6
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	4641      	mov	r1, r8
 8004820:	f000 fab6 	bl	8004d90 <memmove>
 8004824:	68a3      	ldr	r3, [r4, #8]
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	1b9b      	subs	r3, r3, r6
 800482a:	4432      	add	r2, r6
 800482c:	60a3      	str	r3, [r4, #8]
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	2000      	movs	r0, #0
 8004832:	e7db      	b.n	80047ec <__ssputs_r+0x58>
 8004834:	462a      	mov	r2, r5
 8004836:	f000 fb6f 	bl	8004f18 <_realloc_r>
 800483a:	4606      	mov	r6, r0
 800483c:	2800      	cmp	r0, #0
 800483e:	d1e1      	bne.n	8004804 <__ssputs_r+0x70>
 8004840:	6921      	ldr	r1, [r4, #16]
 8004842:	4650      	mov	r0, sl
 8004844:	f000 fabe 	bl	8004dc4 <_free_r>
 8004848:	e7c7      	b.n	80047da <__ssputs_r+0x46>
	...

0800484c <_svfiprintf_r>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	4698      	mov	r8, r3
 8004852:	898b      	ldrh	r3, [r1, #12]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	b09d      	sub	sp, #116	; 0x74
 8004858:	4607      	mov	r7, r0
 800485a:	460d      	mov	r5, r1
 800485c:	4614      	mov	r4, r2
 800485e:	d50e      	bpl.n	800487e <_svfiprintf_r+0x32>
 8004860:	690b      	ldr	r3, [r1, #16]
 8004862:	b963      	cbnz	r3, 800487e <_svfiprintf_r+0x32>
 8004864:	2140      	movs	r1, #64	; 0x40
 8004866:	f000 fafd 	bl	8004e64 <_malloc_r>
 800486a:	6028      	str	r0, [r5, #0]
 800486c:	6128      	str	r0, [r5, #16]
 800486e:	b920      	cbnz	r0, 800487a <_svfiprintf_r+0x2e>
 8004870:	230c      	movs	r3, #12
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e0d1      	b.n	8004a1e <_svfiprintf_r+0x1d2>
 800487a:	2340      	movs	r3, #64	; 0x40
 800487c:	616b      	str	r3, [r5, #20]
 800487e:	2300      	movs	r3, #0
 8004880:	9309      	str	r3, [sp, #36]	; 0x24
 8004882:	2320      	movs	r3, #32
 8004884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004888:	f8cd 800c 	str.w	r8, [sp, #12]
 800488c:	2330      	movs	r3, #48	; 0x30
 800488e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a38 <_svfiprintf_r+0x1ec>
 8004892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004896:	f04f 0901 	mov.w	r9, #1
 800489a:	4623      	mov	r3, r4
 800489c:	469a      	mov	sl, r3
 800489e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a2:	b10a      	cbz	r2, 80048a8 <_svfiprintf_r+0x5c>
 80048a4:	2a25      	cmp	r2, #37	; 0x25
 80048a6:	d1f9      	bne.n	800489c <_svfiprintf_r+0x50>
 80048a8:	ebba 0b04 	subs.w	fp, sl, r4
 80048ac:	d00b      	beq.n	80048c6 <_svfiprintf_r+0x7a>
 80048ae:	465b      	mov	r3, fp
 80048b0:	4622      	mov	r2, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	4638      	mov	r0, r7
 80048b6:	f7ff ff6d 	bl	8004794 <__ssputs_r>
 80048ba:	3001      	adds	r0, #1
 80048bc:	f000 80aa 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c2:	445a      	add	r2, fp
 80048c4:	9209      	str	r2, [sp, #36]	; 0x24
 80048c6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a2 	beq.w	8004a14 <_svfiprintf_r+0x1c8>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048da:	f10a 0a01 	add.w	sl, sl, #1
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	9307      	str	r3, [sp, #28]
 80048e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e6:	931a      	str	r3, [sp, #104]	; 0x68
 80048e8:	4654      	mov	r4, sl
 80048ea:	2205      	movs	r2, #5
 80048ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f0:	4851      	ldr	r0, [pc, #324]	; (8004a38 <_svfiprintf_r+0x1ec>)
 80048f2:	f7fb fca5 	bl	8000240 <memchr>
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	b9d8      	cbnz	r0, 8004932 <_svfiprintf_r+0xe6>
 80048fa:	06d0      	lsls	r0, r2, #27
 80048fc:	bf44      	itt	mi
 80048fe:	2320      	movmi	r3, #32
 8004900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004904:	0711      	lsls	r1, r2, #28
 8004906:	bf44      	itt	mi
 8004908:	232b      	movmi	r3, #43	; 0x2b
 800490a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b2a      	cmp	r3, #42	; 0x2a
 8004914:	d015      	beq.n	8004942 <_svfiprintf_r+0xf6>
 8004916:	9a07      	ldr	r2, [sp, #28]
 8004918:	4654      	mov	r4, sl
 800491a:	2000      	movs	r0, #0
 800491c:	f04f 0c0a 	mov.w	ip, #10
 8004920:	4621      	mov	r1, r4
 8004922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004926:	3b30      	subs	r3, #48	; 0x30
 8004928:	2b09      	cmp	r3, #9
 800492a:	d94e      	bls.n	80049ca <_svfiprintf_r+0x17e>
 800492c:	b1b0      	cbz	r0, 800495c <_svfiprintf_r+0x110>
 800492e:	9207      	str	r2, [sp, #28]
 8004930:	e014      	b.n	800495c <_svfiprintf_r+0x110>
 8004932:	eba0 0308 	sub.w	r3, r0, r8
 8004936:	fa09 f303 	lsl.w	r3, r9, r3
 800493a:	4313      	orrs	r3, r2
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	46a2      	mov	sl, r4
 8004940:	e7d2      	b.n	80048e8 <_svfiprintf_r+0x9c>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	1d19      	adds	r1, r3, #4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	bfbb      	ittet	lt
 800494e:	425b      	neglt	r3, r3
 8004950:	f042 0202 	orrlt.w	r2, r2, #2
 8004954:	9307      	strge	r3, [sp, #28]
 8004956:	9307      	strlt	r3, [sp, #28]
 8004958:	bfb8      	it	lt
 800495a:	9204      	strlt	r2, [sp, #16]
 800495c:	7823      	ldrb	r3, [r4, #0]
 800495e:	2b2e      	cmp	r3, #46	; 0x2e
 8004960:	d10c      	bne.n	800497c <_svfiprintf_r+0x130>
 8004962:	7863      	ldrb	r3, [r4, #1]
 8004964:	2b2a      	cmp	r3, #42	; 0x2a
 8004966:	d135      	bne.n	80049d4 <_svfiprintf_r+0x188>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	9203      	str	r2, [sp, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfb8      	it	lt
 8004974:	f04f 33ff 	movlt.w	r3, #4294967295
 8004978:	3402      	adds	r4, #2
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a48 <_svfiprintf_r+0x1fc>
 8004980:	7821      	ldrb	r1, [r4, #0]
 8004982:	2203      	movs	r2, #3
 8004984:	4650      	mov	r0, sl
 8004986:	f7fb fc5b 	bl	8000240 <memchr>
 800498a:	b140      	cbz	r0, 800499e <_svfiprintf_r+0x152>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	eba0 000a 	sub.w	r0, r0, sl
 8004992:	fa03 f000 	lsl.w	r0, r3, r0
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	4303      	orrs	r3, r0
 800499a:	3401      	adds	r4, #1
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	4826      	ldr	r0, [pc, #152]	; (8004a3c <_svfiprintf_r+0x1f0>)
 80049a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a8:	2206      	movs	r2, #6
 80049aa:	f7fb fc49 	bl	8000240 <memchr>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d038      	beq.n	8004a24 <_svfiprintf_r+0x1d8>
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <_svfiprintf_r+0x1f4>)
 80049b4:	bb1b      	cbnz	r3, 80049fe <_svfiprintf_r+0x1b2>
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	3307      	adds	r3, #7
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	3308      	adds	r3, #8
 80049c0:	9303      	str	r3, [sp, #12]
 80049c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c4:	4433      	add	r3, r6
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	e767      	b.n	800489a <_svfiprintf_r+0x4e>
 80049ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ce:	460c      	mov	r4, r1
 80049d0:	2001      	movs	r0, #1
 80049d2:	e7a5      	b.n	8004920 <_svfiprintf_r+0xd4>
 80049d4:	2300      	movs	r3, #0
 80049d6:	3401      	adds	r4, #1
 80049d8:	9305      	str	r3, [sp, #20]
 80049da:	4619      	mov	r1, r3
 80049dc:	f04f 0c0a 	mov.w	ip, #10
 80049e0:	4620      	mov	r0, r4
 80049e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e6:	3a30      	subs	r2, #48	; 0x30
 80049e8:	2a09      	cmp	r2, #9
 80049ea:	d903      	bls.n	80049f4 <_svfiprintf_r+0x1a8>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0c5      	beq.n	800497c <_svfiprintf_r+0x130>
 80049f0:	9105      	str	r1, [sp, #20]
 80049f2:	e7c3      	b.n	800497c <_svfiprintf_r+0x130>
 80049f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f8:	4604      	mov	r4, r0
 80049fa:	2301      	movs	r3, #1
 80049fc:	e7f0      	b.n	80049e0 <_svfiprintf_r+0x194>
 80049fe:	ab03      	add	r3, sp, #12
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	462a      	mov	r2, r5
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <_svfiprintf_r+0x1f8>)
 8004a06:	a904      	add	r1, sp, #16
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f3af 8000 	nop.w
 8004a0e:	1c42      	adds	r2, r0, #1
 8004a10:	4606      	mov	r6, r0
 8004a12:	d1d6      	bne.n	80049c2 <_svfiprintf_r+0x176>
 8004a14:	89ab      	ldrh	r3, [r5, #12]
 8004a16:	065b      	lsls	r3, r3, #25
 8004a18:	f53f af2c 	bmi.w	8004874 <_svfiprintf_r+0x28>
 8004a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1e:	b01d      	add	sp, #116	; 0x74
 8004a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <_svfiprintf_r+0x1f8>)
 8004a2c:	a904      	add	r1, sp, #16
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f000 f87a 	bl	8004b28 <_printf_i>
 8004a34:	e7eb      	b.n	8004a0e <_svfiprintf_r+0x1c2>
 8004a36:	bf00      	nop
 8004a38:	08005758 	.word	0x08005758
 8004a3c:	08005762 	.word	0x08005762
 8004a40:	00000000 	.word	0x00000000
 8004a44:	08004795 	.word	0x08004795
 8004a48:	0800575e 	.word	0x0800575e

08004a4c <_printf_common>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	4616      	mov	r6, r2
 8004a52:	4699      	mov	r9, r3
 8004a54:	688a      	ldr	r2, [r1, #8]
 8004a56:	690b      	ldr	r3, [r1, #16]
 8004a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	bfb8      	it	lt
 8004a60:	4613      	movlt	r3, r2
 8004a62:	6033      	str	r3, [r6, #0]
 8004a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a68:	4607      	mov	r7, r0
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b10a      	cbz	r2, 8004a72 <_printf_common+0x26>
 8004a6e:	3301      	adds	r3, #1
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	6833      	ldrmi	r3, [r6, #0]
 8004a7a:	3302      	addmi	r3, #2
 8004a7c:	6033      	strmi	r3, [r6, #0]
 8004a7e:	6825      	ldr	r5, [r4, #0]
 8004a80:	f015 0506 	ands.w	r5, r5, #6
 8004a84:	d106      	bne.n	8004a94 <_printf_common+0x48>
 8004a86:	f104 0a19 	add.w	sl, r4, #25
 8004a8a:	68e3      	ldr	r3, [r4, #12]
 8004a8c:	6832      	ldr	r2, [r6, #0]
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	42ab      	cmp	r3, r5
 8004a92:	dc26      	bgt.n	8004ae2 <_printf_common+0x96>
 8004a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a98:	1e13      	subs	r3, r2, #0
 8004a9a:	6822      	ldr	r2, [r4, #0]
 8004a9c:	bf18      	it	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	0692      	lsls	r2, r2, #26
 8004aa2:	d42b      	bmi.n	8004afc <_printf_common+0xb0>
 8004aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	4638      	mov	r0, r7
 8004aac:	47c0      	blx	r8
 8004aae:	3001      	adds	r0, #1
 8004ab0:	d01e      	beq.n	8004af0 <_printf_common+0xa4>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	68e5      	ldr	r5, [r4, #12]
 8004ab6:	6832      	ldr	r2, [r6, #0]
 8004ab8:	f003 0306 	and.w	r3, r3, #6
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	bf08      	it	eq
 8004ac0:	1aad      	subeq	r5, r5, r2
 8004ac2:	68a3      	ldr	r3, [r4, #8]
 8004ac4:	6922      	ldr	r2, [r4, #16]
 8004ac6:	bf0c      	ite	eq
 8004ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004acc:	2500      	movne	r5, #0
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bfc4      	itt	gt
 8004ad2:	1a9b      	subgt	r3, r3, r2
 8004ad4:	18ed      	addgt	r5, r5, r3
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	341a      	adds	r4, #26
 8004ada:	42b5      	cmp	r5, r6
 8004adc:	d11a      	bne.n	8004b14 <_printf_common+0xc8>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	e008      	b.n	8004af4 <_printf_common+0xa8>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4652      	mov	r2, sl
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	4638      	mov	r0, r7
 8004aea:	47c0      	blx	r8
 8004aec:	3001      	adds	r0, #1
 8004aee:	d103      	bne.n	8004af8 <_printf_common+0xac>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	3501      	adds	r5, #1
 8004afa:	e7c6      	b.n	8004a8a <_printf_common+0x3e>
 8004afc:	18e1      	adds	r1, r4, r3
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	2030      	movs	r0, #48	; 0x30
 8004b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b06:	4422      	add	r2, r4
 8004b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b10:	3302      	adds	r3, #2
 8004b12:	e7c7      	b.n	8004aa4 <_printf_common+0x58>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4622      	mov	r2, r4
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	47c0      	blx	r8
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0e6      	beq.n	8004af0 <_printf_common+0xa4>
 8004b22:	3601      	adds	r6, #1
 8004b24:	e7d9      	b.n	8004ada <_printf_common+0x8e>
	...

08004b28 <_printf_i>:
 8004b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	4691      	mov	r9, r2
 8004b30:	7e27      	ldrb	r7, [r4, #24]
 8004b32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b34:	2f78      	cmp	r7, #120	; 0x78
 8004b36:	4680      	mov	r8, r0
 8004b38:	469a      	mov	sl, r3
 8004b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b3e:	d807      	bhi.n	8004b50 <_printf_i+0x28>
 8004b40:	2f62      	cmp	r7, #98	; 0x62
 8004b42:	d80a      	bhi.n	8004b5a <_printf_i+0x32>
 8004b44:	2f00      	cmp	r7, #0
 8004b46:	f000 80d8 	beq.w	8004cfa <_printf_i+0x1d2>
 8004b4a:	2f58      	cmp	r7, #88	; 0x58
 8004b4c:	f000 80a3 	beq.w	8004c96 <_printf_i+0x16e>
 8004b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b58:	e03a      	b.n	8004bd0 <_printf_i+0xa8>
 8004b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b5e:	2b15      	cmp	r3, #21
 8004b60:	d8f6      	bhi.n	8004b50 <_printf_i+0x28>
 8004b62:	a001      	add	r0, pc, #4	; (adr r0, 8004b68 <_printf_i+0x40>)
 8004b64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bd5 	.word	0x08004bd5
 8004b70:	08004b51 	.word	0x08004b51
 8004b74:	08004b51 	.word	0x08004b51
 8004b78:	08004b51 	.word	0x08004b51
 8004b7c:	08004b51 	.word	0x08004b51
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004b51 	.word	0x08004b51
 8004b88:	08004b51 	.word	0x08004b51
 8004b8c:	08004b51 	.word	0x08004b51
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	08004ce1 	.word	0x08004ce1
 8004b98:	08004c05 	.word	0x08004c05
 8004b9c:	08004cc3 	.word	0x08004cc3
 8004ba0:	08004b51 	.word	0x08004b51
 8004ba4:	08004b51 	.word	0x08004b51
 8004ba8:	08004d03 	.word	0x08004d03
 8004bac:	08004b51 	.word	0x08004b51
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004b51 	.word	0x08004b51
 8004bb8:	08004b51 	.word	0x08004b51
 8004bbc:	08004ccb 	.word	0x08004ccb
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	600a      	str	r2, [r1, #0]
 8004bc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0a3      	b.n	8004d1c <_printf_i+0x1f4>
 8004bd4:	6825      	ldr	r5, [r4, #0]
 8004bd6:	6808      	ldr	r0, [r1, #0]
 8004bd8:	062e      	lsls	r6, r5, #24
 8004bda:	f100 0304 	add.w	r3, r0, #4
 8004bde:	d50a      	bpl.n	8004bf6 <_printf_i+0xce>
 8004be0:	6805      	ldr	r5, [r0, #0]
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	2d00      	cmp	r5, #0
 8004be6:	da03      	bge.n	8004bf0 <_printf_i+0xc8>
 8004be8:	232d      	movs	r3, #45	; 0x2d
 8004bea:	426d      	negs	r5, r5
 8004bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf0:	485e      	ldr	r0, [pc, #376]	; (8004d6c <_printf_i+0x244>)
 8004bf2:	230a      	movs	r3, #10
 8004bf4:	e019      	b.n	8004c2a <_printf_i+0x102>
 8004bf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bfa:	6805      	ldr	r5, [r0, #0]
 8004bfc:	600b      	str	r3, [r1, #0]
 8004bfe:	bf18      	it	ne
 8004c00:	b22d      	sxthne	r5, r5
 8004c02:	e7ef      	b.n	8004be4 <_printf_i+0xbc>
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	1d18      	adds	r0, r3, #4
 8004c0a:	6008      	str	r0, [r1, #0]
 8004c0c:	0628      	lsls	r0, r5, #24
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0xec>
 8004c10:	681d      	ldr	r5, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0xf2>
 8004c14:	0669      	lsls	r1, r5, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0xe8>
 8004c18:	881d      	ldrh	r5, [r3, #0]
 8004c1a:	4854      	ldr	r0, [pc, #336]	; (8004d6c <_printf_i+0x244>)
 8004c1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004c1e:	bf0c      	ite	eq
 8004c20:	2308      	moveq	r3, #8
 8004c22:	230a      	movne	r3, #10
 8004c24:	2100      	movs	r1, #0
 8004c26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2a:	6866      	ldr	r6, [r4, #4]
 8004c2c:	60a6      	str	r6, [r4, #8]
 8004c2e:	2e00      	cmp	r6, #0
 8004c30:	bfa2      	ittt	ge
 8004c32:	6821      	ldrge	r1, [r4, #0]
 8004c34:	f021 0104 	bicge.w	r1, r1, #4
 8004c38:	6021      	strge	r1, [r4, #0]
 8004c3a:	b90d      	cbnz	r5, 8004c40 <_printf_i+0x118>
 8004c3c:	2e00      	cmp	r6, #0
 8004c3e:	d04d      	beq.n	8004cdc <_printf_i+0x1b4>
 8004c40:	4616      	mov	r6, r2
 8004c42:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c46:	fb03 5711 	mls	r7, r3, r1, r5
 8004c4a:	5dc7      	ldrb	r7, [r0, r7]
 8004c4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c50:	462f      	mov	r7, r5
 8004c52:	42bb      	cmp	r3, r7
 8004c54:	460d      	mov	r5, r1
 8004c56:	d9f4      	bls.n	8004c42 <_printf_i+0x11a>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d10b      	bne.n	8004c74 <_printf_i+0x14c>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	07df      	lsls	r7, r3, #31
 8004c60:	d508      	bpl.n	8004c74 <_printf_i+0x14c>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6861      	ldr	r1, [r4, #4]
 8004c66:	4299      	cmp	r1, r3
 8004c68:	bfde      	ittt	le
 8004c6a:	2330      	movle	r3, #48	; 0x30
 8004c6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c74:	1b92      	subs	r2, r2, r6
 8004c76:	6122      	str	r2, [r4, #16]
 8004c78:	f8cd a000 	str.w	sl, [sp]
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	aa03      	add	r2, sp, #12
 8004c80:	4621      	mov	r1, r4
 8004c82:	4640      	mov	r0, r8
 8004c84:	f7ff fee2 	bl	8004a4c <_printf_common>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d14c      	bne.n	8004d26 <_printf_i+0x1fe>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	b004      	add	sp, #16
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	4835      	ldr	r0, [pc, #212]	; (8004d6c <_printf_i+0x244>)
 8004c98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	680e      	ldr	r6, [r1, #0]
 8004ca0:	061f      	lsls	r7, r3, #24
 8004ca2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ca6:	600e      	str	r6, [r1, #0]
 8004ca8:	d514      	bpl.n	8004cd4 <_printf_i+0x1ac>
 8004caa:	07d9      	lsls	r1, r3, #31
 8004cac:	bf44      	itt	mi
 8004cae:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb2:	6023      	strmi	r3, [r4, #0]
 8004cb4:	b91d      	cbnz	r5, 8004cbe <_printf_i+0x196>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f023 0320 	bic.w	r3, r3, #32
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	e7b0      	b.n	8004c24 <_printf_i+0xfc>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	f043 0320 	orr.w	r3, r3, #32
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	2378      	movs	r3, #120	; 0x78
 8004ccc:	4828      	ldr	r0, [pc, #160]	; (8004d70 <_printf_i+0x248>)
 8004cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cd2:	e7e3      	b.n	8004c9c <_printf_i+0x174>
 8004cd4:	065e      	lsls	r6, r3, #25
 8004cd6:	bf48      	it	mi
 8004cd8:	b2ad      	uxthmi	r5, r5
 8004cda:	e7e6      	b.n	8004caa <_printf_i+0x182>
 8004cdc:	4616      	mov	r6, r2
 8004cde:	e7bb      	b.n	8004c58 <_printf_i+0x130>
 8004ce0:	680b      	ldr	r3, [r1, #0]
 8004ce2:	6826      	ldr	r6, [r4, #0]
 8004ce4:	6960      	ldr	r0, [r4, #20]
 8004ce6:	1d1d      	adds	r5, r3, #4
 8004ce8:	600d      	str	r5, [r1, #0]
 8004cea:	0635      	lsls	r5, r6, #24
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0x1cc>
 8004cf0:	6018      	str	r0, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0x1d2>
 8004cf4:	0671      	lsls	r1, r6, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0x1c8>
 8004cf8:	8018      	strh	r0, [r3, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	4616      	mov	r6, r2
 8004d00:	e7ba      	b.n	8004c78 <_printf_i+0x150>
 8004d02:	680b      	ldr	r3, [r1, #0]
 8004d04:	1d1a      	adds	r2, r3, #4
 8004d06:	600a      	str	r2, [r1, #0]
 8004d08:	681e      	ldr	r6, [r3, #0]
 8004d0a:	6862      	ldr	r2, [r4, #4]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4630      	mov	r0, r6
 8004d10:	f7fb fa96 	bl	8000240 <memchr>
 8004d14:	b108      	cbz	r0, 8004d1a <_printf_i+0x1f2>
 8004d16:	1b80      	subs	r0, r0, r6
 8004d18:	6060      	str	r0, [r4, #4]
 8004d1a:	6863      	ldr	r3, [r4, #4]
 8004d1c:	6123      	str	r3, [r4, #16]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d24:	e7a8      	b.n	8004c78 <_printf_i+0x150>
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	4632      	mov	r2, r6
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	47d0      	blx	sl
 8004d30:	3001      	adds	r0, #1
 8004d32:	d0ab      	beq.n	8004c8c <_printf_i+0x164>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	079b      	lsls	r3, r3, #30
 8004d38:	d413      	bmi.n	8004d62 <_printf_i+0x23a>
 8004d3a:	68e0      	ldr	r0, [r4, #12]
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	bfb8      	it	lt
 8004d42:	4618      	movlt	r0, r3
 8004d44:	e7a4      	b.n	8004c90 <_printf_i+0x168>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4632      	mov	r2, r6
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	47d0      	blx	sl
 8004d50:	3001      	adds	r0, #1
 8004d52:	d09b      	beq.n	8004c8c <_printf_i+0x164>
 8004d54:	3501      	adds	r5, #1
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	9903      	ldr	r1, [sp, #12]
 8004d5a:	1a5b      	subs	r3, r3, r1
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dcf2      	bgt.n	8004d46 <_printf_i+0x21e>
 8004d60:	e7eb      	b.n	8004d3a <_printf_i+0x212>
 8004d62:	2500      	movs	r5, #0
 8004d64:	f104 0619 	add.w	r6, r4, #25
 8004d68:	e7f5      	b.n	8004d56 <_printf_i+0x22e>
 8004d6a:	bf00      	nop
 8004d6c:	08005769 	.word	0x08005769
 8004d70:	0800577a 	.word	0x0800577a

08004d74 <memcpy>:
 8004d74:	440a      	add	r2, r1
 8004d76:	4291      	cmp	r1, r2
 8004d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d7c:	d100      	bne.n	8004d80 <memcpy+0xc>
 8004d7e:	4770      	bx	lr
 8004d80:	b510      	push	{r4, lr}
 8004d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d8a:	4291      	cmp	r1, r2
 8004d8c:	d1f9      	bne.n	8004d82 <memcpy+0xe>
 8004d8e:	bd10      	pop	{r4, pc}

08004d90 <memmove>:
 8004d90:	4288      	cmp	r0, r1
 8004d92:	b510      	push	{r4, lr}
 8004d94:	eb01 0402 	add.w	r4, r1, r2
 8004d98:	d902      	bls.n	8004da0 <memmove+0x10>
 8004d9a:	4284      	cmp	r4, r0
 8004d9c:	4623      	mov	r3, r4
 8004d9e:	d807      	bhi.n	8004db0 <memmove+0x20>
 8004da0:	1e43      	subs	r3, r0, #1
 8004da2:	42a1      	cmp	r1, r4
 8004da4:	d008      	beq.n	8004db8 <memmove+0x28>
 8004da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dae:	e7f8      	b.n	8004da2 <memmove+0x12>
 8004db0:	4402      	add	r2, r0
 8004db2:	4601      	mov	r1, r0
 8004db4:	428a      	cmp	r2, r1
 8004db6:	d100      	bne.n	8004dba <memmove+0x2a>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc2:	e7f7      	b.n	8004db4 <memmove+0x24>

08004dc4 <_free_r>:
 8004dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	d048      	beq.n	8004e5c <_free_r+0x98>
 8004dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dce:	9001      	str	r0, [sp, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd6:	bfb8      	it	lt
 8004dd8:	18e4      	addlt	r4, r4, r3
 8004dda:	f000 f8d3 	bl	8004f84 <__malloc_lock>
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <_free_r+0x9c>)
 8004de0:	9801      	ldr	r0, [sp, #4]
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	4615      	mov	r5, r2
 8004de6:	b933      	cbnz	r3, 8004df6 <_free_r+0x32>
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6014      	str	r4, [r2, #0]
 8004dec:	b003      	add	sp, #12
 8004dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004df2:	f000 b8cd 	b.w	8004f90 <__malloc_unlock>
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d90b      	bls.n	8004e12 <_free_r+0x4e>
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	1862      	adds	r2, r4, r1
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf04      	itt	eq
 8004e02:	681a      	ldreq	r2, [r3, #0]
 8004e04:	685b      	ldreq	r3, [r3, #4]
 8004e06:	6063      	str	r3, [r4, #4]
 8004e08:	bf04      	itt	eq
 8004e0a:	1852      	addeq	r2, r2, r1
 8004e0c:	6022      	streq	r2, [r4, #0]
 8004e0e:	602c      	str	r4, [r5, #0]
 8004e10:	e7ec      	b.n	8004dec <_free_r+0x28>
 8004e12:	461a      	mov	r2, r3
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b10b      	cbz	r3, 8004e1c <_free_r+0x58>
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	d9fa      	bls.n	8004e12 <_free_r+0x4e>
 8004e1c:	6811      	ldr	r1, [r2, #0]
 8004e1e:	1855      	adds	r5, r2, r1
 8004e20:	42a5      	cmp	r5, r4
 8004e22:	d10b      	bne.n	8004e3c <_free_r+0x78>
 8004e24:	6824      	ldr	r4, [r4, #0]
 8004e26:	4421      	add	r1, r4
 8004e28:	1854      	adds	r4, r2, r1
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	d1dd      	bne.n	8004dec <_free_r+0x28>
 8004e30:	681c      	ldr	r4, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	6053      	str	r3, [r2, #4]
 8004e36:	4421      	add	r1, r4
 8004e38:	6011      	str	r1, [r2, #0]
 8004e3a:	e7d7      	b.n	8004dec <_free_r+0x28>
 8004e3c:	d902      	bls.n	8004e44 <_free_r+0x80>
 8004e3e:	230c      	movs	r3, #12
 8004e40:	6003      	str	r3, [r0, #0]
 8004e42:	e7d3      	b.n	8004dec <_free_r+0x28>
 8004e44:	6825      	ldr	r5, [r4, #0]
 8004e46:	1961      	adds	r1, r4, r5
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	bf04      	itt	eq
 8004e4c:	6819      	ldreq	r1, [r3, #0]
 8004e4e:	685b      	ldreq	r3, [r3, #4]
 8004e50:	6063      	str	r3, [r4, #4]
 8004e52:	bf04      	itt	eq
 8004e54:	1949      	addeq	r1, r1, r5
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	6054      	str	r4, [r2, #4]
 8004e5a:	e7c7      	b.n	8004dec <_free_r+0x28>
 8004e5c:	b003      	add	sp, #12
 8004e5e:	bd30      	pop	{r4, r5, pc}
 8004e60:	2000a0a0 	.word	0x2000a0a0

08004e64 <_malloc_r>:
 8004e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e66:	1ccd      	adds	r5, r1, #3
 8004e68:	f025 0503 	bic.w	r5, r5, #3
 8004e6c:	3508      	adds	r5, #8
 8004e6e:	2d0c      	cmp	r5, #12
 8004e70:	bf38      	it	cc
 8004e72:	250c      	movcc	r5, #12
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	4606      	mov	r6, r0
 8004e78:	db01      	blt.n	8004e7e <_malloc_r+0x1a>
 8004e7a:	42a9      	cmp	r1, r5
 8004e7c:	d903      	bls.n	8004e86 <_malloc_r+0x22>
 8004e7e:	230c      	movs	r3, #12
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	2000      	movs	r0, #0
 8004e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e86:	f000 f87d 	bl	8004f84 <__malloc_lock>
 8004e8a:	4921      	ldr	r1, [pc, #132]	; (8004f10 <_malloc_r+0xac>)
 8004e8c:	680a      	ldr	r2, [r1, #0]
 8004e8e:	4614      	mov	r4, r2
 8004e90:	b99c      	cbnz	r4, 8004eba <_malloc_r+0x56>
 8004e92:	4f20      	ldr	r7, [pc, #128]	; (8004f14 <_malloc_r+0xb0>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	b923      	cbnz	r3, 8004ea2 <_malloc_r+0x3e>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f862 	bl	8004f64 <_sbrk_r>
 8004ea0:	6038      	str	r0, [r7, #0]
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 f85d 	bl	8004f64 <_sbrk_r>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	d123      	bne.n	8004ef6 <_malloc_r+0x92>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 f86c 	bl	8004f90 <__malloc_unlock>
 8004eb8:	e7e3      	b.n	8004e82 <_malloc_r+0x1e>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	1b5b      	subs	r3, r3, r5
 8004ebe:	d417      	bmi.n	8004ef0 <_malloc_r+0x8c>
 8004ec0:	2b0b      	cmp	r3, #11
 8004ec2:	d903      	bls.n	8004ecc <_malloc_r+0x68>
 8004ec4:	6023      	str	r3, [r4, #0]
 8004ec6:	441c      	add	r4, r3
 8004ec8:	6025      	str	r5, [r4, #0]
 8004eca:	e004      	b.n	8004ed6 <_malloc_r+0x72>
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	42a2      	cmp	r2, r4
 8004ed0:	bf0c      	ite	eq
 8004ed2:	600b      	streq	r3, [r1, #0]
 8004ed4:	6053      	strne	r3, [r2, #4]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f85a 	bl	8004f90 <__malloc_unlock>
 8004edc:	f104 000b 	add.w	r0, r4, #11
 8004ee0:	1d23      	adds	r3, r4, #4
 8004ee2:	f020 0007 	bic.w	r0, r0, #7
 8004ee6:	1ac2      	subs	r2, r0, r3
 8004ee8:	d0cc      	beq.n	8004e84 <_malloc_r+0x20>
 8004eea:	1a1b      	subs	r3, r3, r0
 8004eec:	50a3      	str	r3, [r4, r2]
 8004eee:	e7c9      	b.n	8004e84 <_malloc_r+0x20>
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	6864      	ldr	r4, [r4, #4]
 8004ef4:	e7cc      	b.n	8004e90 <_malloc_r+0x2c>
 8004ef6:	1cc4      	adds	r4, r0, #3
 8004ef8:	f024 0403 	bic.w	r4, r4, #3
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d0e3      	beq.n	8004ec8 <_malloc_r+0x64>
 8004f00:	1a21      	subs	r1, r4, r0
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f82e 	bl	8004f64 <_sbrk_r>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d1dd      	bne.n	8004ec8 <_malloc_r+0x64>
 8004f0c:	e7cf      	b.n	8004eae <_malloc_r+0x4a>
 8004f0e:	bf00      	nop
 8004f10:	2000a0a0 	.word	0x2000a0a0
 8004f14:	2000a0a4 	.word	0x2000a0a4

08004f18 <_realloc_r>:
 8004f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	460e      	mov	r6, r1
 8004f20:	b921      	cbnz	r1, 8004f2c <_realloc_r+0x14>
 8004f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f26:	4611      	mov	r1, r2
 8004f28:	f7ff bf9c 	b.w	8004e64 <_malloc_r>
 8004f2c:	b922      	cbnz	r2, 8004f38 <_realloc_r+0x20>
 8004f2e:	f7ff ff49 	bl	8004dc4 <_free_r>
 8004f32:	4625      	mov	r5, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f38:	f000 f830 	bl	8004f9c <_malloc_usable_size_r>
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d20f      	bcs.n	8004f60 <_realloc_r+0x48>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ff8e 	bl	8004e64 <_malloc_r>
 8004f48:	4605      	mov	r5, r0
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d0f2      	beq.n	8004f34 <_realloc_r+0x1c>
 8004f4e:	4631      	mov	r1, r6
 8004f50:	4622      	mov	r2, r4
 8004f52:	f7ff ff0f 	bl	8004d74 <memcpy>
 8004f56:	4631      	mov	r1, r6
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f7ff ff33 	bl	8004dc4 <_free_r>
 8004f5e:	e7e9      	b.n	8004f34 <_realloc_r+0x1c>
 8004f60:	4635      	mov	r5, r6
 8004f62:	e7e7      	b.n	8004f34 <_realloc_r+0x1c>

08004f64 <_sbrk_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d06      	ldr	r5, [pc, #24]	; (8004f80 <_sbrk_r+0x1c>)
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	f7fb ff0e 	bl	8000d90 <_sbrk>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_sbrk_r+0x1a>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_sbrk_r+0x1a>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	2000a278 	.word	0x2000a278

08004f84 <__malloc_lock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	; (8004f8c <__malloc_lock+0x8>)
 8004f86:	f000 b811 	b.w	8004fac <__retarget_lock_acquire_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	2000a280 	.word	0x2000a280

08004f90 <__malloc_unlock>:
 8004f90:	4801      	ldr	r0, [pc, #4]	; (8004f98 <__malloc_unlock+0x8>)
 8004f92:	f000 b80c 	b.w	8004fae <__retarget_lock_release_recursive>
 8004f96:	bf00      	nop
 8004f98:	2000a280 	.word	0x2000a280

08004f9c <_malloc_usable_size_r>:
 8004f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa0:	1f18      	subs	r0, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bfbc      	itt	lt
 8004fa6:	580b      	ldrlt	r3, [r1, r0]
 8004fa8:	18c0      	addlt	r0, r0, r3
 8004faa:	4770      	bx	lr

08004fac <__retarget_lock_acquire_recursive>:
 8004fac:	4770      	bx	lr

08004fae <__retarget_lock_release_recursive>:
 8004fae:	4770      	bx	lr

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
